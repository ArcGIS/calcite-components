name: Sync from Airtable

on:
  # publish blog using webhook
  repository_dispatch:
    types: [airtable-update]

env:
  DATA: ${{ toJSON(github.event.client_payload.data) }}
  NUMBER: ${{ github.event.client_payload.number }}
  TITLE: ${{ github.event.client_payload.title }}
  OWNER: 'Esri'
  REPO: 'calcite-design-tokens'

jobs:
  existing_issue:
    name: Find Existing Issue
    runs-on: ubuntu-latest
    outputs:
      github_issue: ${{ toJSON(steps.find-existing-issue.outputs.result) }}
    steps:
     - uses: actions/github-script@v6
       id: find-existing-issue
       env:
          NUMBER: '${{env.NUMBER}}'
          OWNER: '${{env.OWNER}}'
          REPO: '${{env.REPO}}'
       with:
         result-encoding: string
         script: |
           const { NUMBER, OWNER, REPO } = process.env;
           const issue = await github.rest.issues.get({
             issue_number: NUMBER,
             owner: OWNER,
             repo: REPO,
           });
           return issue.status === 200 ? issue : null;
        
  debugger:
    name: Test for data
    needs: existing_issue
    runs-on: ubuntu-latest
    steps:
     - id: set-status
       uses: actions/github-script@v6
       env:
          ISSUE: ${{ fromJSON(needs.existing_issue.outputs.github_issue) }}
       with:
          script: |
            const issue  = JSON.parse(process.env.ISSUE);
            const keys = Object.keys(issue)
            
            core.info(keys)
            core.info(issue)
            return issue.status;
     - uses: actions/github-script@v6
       env:
          STATUS: ${{ fromJSON(needs.existing_issue.outputs.github_issue).status == 200  }}
          DATA: ${{env.DATA}}
          ACTION: ${{github.event.client_payload.action}}
          ISASSIGNED: ${{ github.event.client_payload.action == 'assigned/unassigned' }} 
       with:
          script: |
              core.info(process.env.STATUS)
              core.info(process.env.DATA)
              core.info(process.env.ACTION )
              core.info(process.env.ISASSIGNED)
    
  assigned_unassigned:
    name: Assign or Unassign
    needs: existing_issue
    if: (toJSON(needs.existing_issue.outputs.github_issue).status == 200 ) && (github.event.client_payload.action == 'assigned/unassigned')
    runs-on: ubuntu-latest
    steps:
     - uses: actions/github-script@v6
       env:
        NUMBER: ${{env.NUMBER}}
        OWNER: ${{env.OWNER}}
        REPO: ${{env.REPO}}
        DATA: ${{ fromJSON(env.DATA) }}
        ISSUE: ${{ fromJSON(needs.existing_issue.outputs.github_issue) }}
       with:
          result-encoding: string
          script: |
            const { OWNER, REPO, NUMBER, DATA, ISSUE } = process.env;
            const { assignees } = JSON.parse(DATA);

            if (assignees) {
                const assignee = assignees[0];
                const { updated_at } = JSON.parse(ISSUE);
                const issueUpdateTime = new Date(updated_at).getTime();
                const currentTime = new Date().getTime();
                const timeDiffInMs = currentTime - issueUpdateTime;
                const getInMinutes = (ms) => (ms / 1000 / 60);
                const differenceInMinutes = getInMinutes(timeDiffInMs);

                core.info(updated_at)
                core.info(assignee)

                if (differenceInMinutes > 2) {
                  const updateIssueData = { owner: OWNER, repo: REPO, issue_number: NUMBER, assignees };
                  core.info(JSON.stringify(updateIssueData, null, 2))
                } else {
                  core.info('Stopping propagation, issue was recently updated and this is likely an update loop.')
                }
            }
#  github.rest.issues.update(updateIssueData);  
#          
#   labeled_unlabeled:
#     name: Label or UnLabel
#     needs: existing_issue
#     if: (fromJSON(needs.existing_issue.outputs.github_issue).status == 200 ) && (github.event.client_payload.action == 'labeled/unlabeled')
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v6
#         with:
#             script: |
#               core.info(process.env.ACTION)
#   milestoned_demilestoned:
#     name: Milestone or DeMilestone
#     needs: existing_issue
#     if: (fromJSON(needs.existing_issue.outputs.github_issue).status == 200 ) && (github.event.client_payload.action == 'milestoned/demilestoned'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v6
#         with:
#             script: |
#               console.log(process.env.ACTION)
#   open_closed:
#     name: Opened, ReOpened, or Closed
#     needs: existing_issue
#     if: (fromJSON(needs.existing_issue.outputs.github_issue).status == 200 ) && (github.event.client_payload.action == 'opened/closed'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v6
#         with:
#             script: |
#               core.info(process.env.ACTION)
#   edited:
#     name: Edited
#     needs: existing_issue
#     if: (fromJSON(needs.existing_issue.outputs.github_issue).status == 200 ) && (github.event.client_payload.action == 'edited'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v6
#         with:
#             script: |
#               core.info(process.env.ACTION)
#   new_issue:
#     name: Create New Issue
#     needs: existing_issue
#     if: (fromJSON(needs.existing_issue.outputs.github_issue).status != 200 }}
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v6
#         with:
#             script: |
#               core.info('New Issue')
