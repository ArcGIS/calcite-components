name: Sync to Airtable

on:
  issues:
    types: [assigned, closed, demilestoned, edited, labeled, milestoned, opened, reopened, unassigned, unlabeled]

jobs:
  issue_assigned:
      runs-on: ubuntu-latest
      if: github.event.action == 'assigned' || github.event.action == 'unassigned'
      steps:
        - name: Set Data
          id: set-assigned-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                data: JSON.stringify({ assignees: context.payload.issue.assignees }),
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
  issue_closed:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
        - name: Set Data
          id: set-closed-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                data: context.payload.issue.closed_at,
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
  issue_milestoned:
    runs-on: ubuntu-latest
    if: github.event.action == 'demilestoned' || github.event.action == 'milestoned'
    steps:
        - name: Set Data
          id: set-demilestoned-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                data: JSON.stringify(context.payload.issue.milestone || null),
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
  issue_edited:
    runs-on: ubuntu-latest
    if: github.event.action == 'edited'
    steps:
        - name: Set Data
          id: set-edited-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                changes: JSON.stringify(context.payload.changes || null),
                data: JSON.stringify(Object.keys(context.payload.changes).reduce((acc, key) => {
                  acc[key] = context.payload.issue[key]
                  return acc;
                }, {})),
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.changes['title']
                  ? context.payload.changes['title'].from
                  : context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
  issue_labeled:
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' || github.event.action == 'unlabeled'
    steps:
        - name: Set Data
          id: set-labeled-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                data: JSON.stringify({labels: context.payload.issue.labels}),
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
  issue_opened:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    steps:
        - name: Set Data
          id: set-opened-data
          uses: actions/github-script@v6
          env:
            SECRET: ${{ secrets.AIRTABLE_KEY }}
            WEBHOOK: ${{ secrets.AIRTABLE_WEBHOOK }}
          with:
            script: |
              const body = JSON.stringify({
                action: context.payload.action,
                data: JSON.stringify(context.payload.issue),
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                number: context.payload.issue.number.toString(),
                secret: process.env.SECRET,
                title: context.payload.issue.title,
              });

              return fetch(process.env.WEBHOOK, {
                body,
                headers: {
                  "Content-Type": "application/json"
                },
                method: "POST"
              });
