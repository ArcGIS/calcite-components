import { j as G, M as I, c as l } from "./index3.js";
import { useMDXComponents as d } from "./index4.js";
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v3.0.0-next.100
*/
const B = "data:text/markdown;base64,";
function b(g) {
  return G.jsxs(G.Fragment, {
    children: [G.jsx(I, {
      title: "Overview/Conventions"
    }), `
`, `
`, G.jsx(l, {
      children: B
    })]
  });
}
function Y(g = {}) {
  const { wrapper: Z } = {
    ...d(),
    ...g.components
  };
  return Z ? G.jsx(Z, {
    ...g,
    children: G.jsx(b, {
      ...g
    })
  }) : b();
}
export {
  Y as default
};
