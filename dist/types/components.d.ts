/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  TabChangeEventDetail,
} from './interfaces/TabChange';
import {
  TreeSelectionMode,
} from './interfaces/TreeSelectionMode';
import {
  TreeSelectDetail,
} from './interfaces/TreeSelect';
import {
  TreeItemSelectDetail,
} from './interfaces/TreeItemSelect';

export namespace Components {
  interface CalciteAlert {
    /**
    * Unique ID for this alert
    */
    'alertId': string;
    /**
    * emit the `calciteAlertClose` event - <calcite-alerts> listens for this
    */
    'closeCalciteAlert': () => Promise<void>;
    /**
    * Color for the alert (will apply to top border and icon)
    */
    'color': "blue" | "green" | "red" | "yellow";
    'currentAlert': string;
    /**
    * Close the alert automatically (recommended for passive, non-blocking alerts)
    */
    'dismiss': boolean;
    /**
    * Length before autodismissal (only used with `dismiss`)
    */
    'duration': "fast" | "medium" | "slow";
    /**
    * If false, no icon will be shown in the alert
    */
    'icon': boolean;
    /**
    * emit the `calciteAlertOpen` event - <calcite-alerts> listens for this
    */
    'openCalciteAlert': () => Promise<void>;
    'queueLength': number;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteAlerts {}
  interface CalciteButton {
    /**
    * specify the appearance style of the button, defaults to solid. Specifying "inline" will render the component as an anchor
    */
    'appearance': | "solid"
    | "outline"
    | "clear"
    | "inline";
    /**
    * specify the color of the button, defaults to blue
    */
    'color': | "blue"
    | "dark"
    | "light"
    | "red";
    'hastext': boolean;
    /**
    * optionally pass a href - used to determine if the component should render as a button or an anchor
    */
    'href'?: string;
    /**
    * optionally pass icon path data to be positioned within the button - pass only raw path data from calcite ui helper
    */
    'icon'?: string;
    /**
    * optionally add a calcite-loader component inline to indicate loading is occuring. You can add and remove this prop depending on status
    */
    'loading'?: boolean;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale': "xs" | "s" | "m" | "l" | "xl";
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * specify the width of the button, defaults to auto
    */
    'width': "auto" | "half" | "full";
  }
  interface CalciteCheckbox {
    /**
    * True if the checkbox is initially checked
    */
    'checked'?: boolean;
    /**
    * True if the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
    */
    'indeterminate'?: boolean;
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * Size of the checkbox
    */
    'size'?: "small" | "large";
    /**
    * Determines what theme to use
    */
    'theme': "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteDateDay {
    /**
    * Active tells whether day is Actively in focus.
    */
    'active': boolean;
    /**
    * day of the month to be shown.
    */
    'day': number;
    /**
    * Enables tells whether day enabled for the user click.
    */
    'enable': boolean;
    /**
    * Selected tells whether day is selected.
    */
    'selected': boolean;
  }
  interface CalciteDateMonth {
    /**
    * Date currently active.
    */
    'activeDate': Date;
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale': string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max': Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min': Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month': number;
    /**
    * Already selected date.
    */
    'selectedDate': Date;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek': number;
    /**
    * Year for which the calendar is shown.
    */
    'year': number;
  }
  interface CalciteDateMonthHeader {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale': string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max': Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min': Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month': number;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel': string;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel': string;
    /**
    * Already selected date.
    */
    'selectedDate': Date;
    /**
    * Year for which the calendar is shown.
    */
    'year': number;
  }
  interface CalciteDatePicker {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Value of the form control
    */
    'max'?: string;
    /**
    * Name of the form control (useful for specifying input/label relationship)
    */
    'min'?: string;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Value of the form control
    */
    'value'?: string;
  }
  interface CalciteDropdown {
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'alignment': | "left"
    | "right"
    | "center";
    /**
    * specify the scale of dropdrown, defaults to m
    */
    'scale': "s" | "m" | "l";
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'theme': "light" | "dark";
  }
  interface CalciteDropdownGroup {
    /**
    * optionally set a group title for display
    */
    'grouptitle'?: string;
  }
  interface CalciteDropdownItem {
    'active': boolean;
    'requestedDropdownGroup': string;
    'requestedDropdownItem': string;
  }
  interface CalciteExample {
    /**
    * Add a jsdoc comment describing your method and it's parameters (use `@param`).
    */
    'doThing': () => Promise<void>;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'property': string;
  }
  interface CalciteLoader {
    /**
    * Inline loaders are smaller and will appear to the left of the text
    */
    'inline': boolean;
    /**
    * Show the loader
    */
    'isActive': boolean;
    /**
    * Text which should appear under the loading indicator (optional)
    */
    'text': string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type': "indeterminate" | "determinate";
    /**
    * Percent complete of 100, only valid for determinate indicators
    */
    'value': number;
  }
  interface CalciteModal {
    /**
    * Optionally pass a function to run before close
    */
    'beforeClose': (el: HTMLElement) => Promise<void>;
    /**
    * Close the modal, first running the `beforeClose` method
    */
    'close': () => Promise<HTMLElement>;
    /**
    * Aria label for the close button
    */
    'closeLabel': string;
    /**
    * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
    */
    'color'?: "red" | "blue";
    /**
    * Prevent the modal from taking up the entire screen on mobile
    */
    'docked': boolean;
    /**
    * Specify an element to focus when the modal is first opened
    */
    'firstFocus'?: HTMLElement;
    /**
    * Open the modal
    */
    'open': () => Promise<HTMLElement>;
    /**
    * Set the overall size of the modal
    */
    'size': "small" | "medium" | "large" | "fullscreen";
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteProgress {
    /**
    * Fill bar in the opposite direction
    */
    'reversed': boolean;
    /**
    * Text label for the progress indicator
    */
    'text': string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type': "indeterminate" | "determinate";
    /**
    * Percent complete of 100
    */
    'value': number;
  }
  interface CalciteRadioGroup {
    /**
    * The group's name. Gets submitted with the form.
    */
    'name': string;
    /**
    * The group's selected item.
    */
    'selectedItem': HTMLCalciteRadioGroupItemElement;
    /**
    * The component's theme.
    */
    'theme': "light" | "dark";
  }
  interface CalciteRadioGroupItem {
    /**
    * Indicates whether the control is checked.
    */
    'checked': boolean;
    /**
    * The control's value.
    */
    'value': any | null;
  }
  interface CalciteSlider {
    /**
    * Disable and gray out the slider
    */
    'disabled': boolean;
    /**
    * Label handles with their numeric value
    */
    'labelHandles'?: boolean;
    /**
    * Label tick marks with their numeric value.
    */
    'labelTicks'?: boolean;
    /**
    * Maximum selectable value
    */
    'max': number;
    /**
    * Label for second handle if needed (ex. "Temperature, upper bound")
    */
    'maxLabel'?: string;
    /**
    * Currently selected upper number (if multi-select)
    */
    'maxValue'?: number;
    /**
    * Minimum selectable value
    */
    'min': number;
    /**
    * Label for first (or only) handle (ex. "Temperature, lower bound")
    */
    'minLabel': string;
    /**
    * Currently selected lower number (if multi-select)
    */
    'minValue'?: number;
    /**
    * Interval to move on page up/page down keys
    */
    'pageStep'?: number;
    /**
    * Use finer point for handles
    */
    'precise'?: boolean;
    /**
    * Snap selection along the step interval
    */
    'snap'?: boolean;
    /**
    * Interval to move on up/down keys
    */
    'step'?: number;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * Show tick marks on the number line at provided interval
    */
    'ticks'?: number;
    /**
    * Currently selected number (if single select)
    */
    'value': null | number;
  }
  interface CalciteSwitch {
    /**
    * What color the switch should be
    */
    'color'?: "red" | "blue";
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * True if the switch is initially on
    */
    'switched'?: boolean;
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteTab {
    /**
    * Return the index of this tab within the tab array
    */
    'getTabIndex': () => Promise<number>;
    /**
    * Show this tab
    */
    'isActive': boolean;
    /**
    * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
    */
    'tab': string;
    'updateAriaInfo': (tabIds?: string[], titleIds?: string[]) => Promise<void>;
  }
  interface CalciteTabNav {
    /**
    * Name to use when saving selected tab data to localStorage
    */
    'storageId': string;
    /**
    * Pass the same string to multiple tab navs to keep them all in sync if one changes
    */
    'syncId': string;
  }
  interface CalciteTabTitle {
    'getTabIdentifier': () => Promise<string | number>;
    /**
    * Return the index of this title within the nav
    */
    'getTabIndex': () => Promise<number>;
    /**
    * Show this tab title as selected
    */
    'isActive': boolean;
    /**
    * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
    */
    'tab'?: string;
    'updateAriaInfo': (tabIds?: string[], titleIds?: string[]) => Promise<void>;
  }
  interface CalciteTabs {
    /**
    * Align tab titles to the edge or fully justify them across the tab nav ("center")
    */
    'layout': "center" | "inline";
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteTree {
    /**
    * Be sure to add a jsdoc comment describing your propery for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'lines': boolean;
    'root': boolean;
    'selectionMode': TreeSelectionMode;
    'size': "s" | "m";
    'theme': "light" | "dark";
  }
  interface CalciteTreeItem {
    'depth': number;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'expanded': boolean;
    'hasChildren': boolean;
    'selected': boolean;
  }
}

declare global {


  interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {}
  var HTMLCalciteAlertElement: {
    prototype: HTMLCalciteAlertElement;
    new (): HTMLCalciteAlertElement;
  };

  interface HTMLCalciteAlertsElement extends Components.CalciteAlerts, HTMLStencilElement {}
  var HTMLCalciteAlertsElement: {
    prototype: HTMLCalciteAlertsElement;
    new (): HTMLCalciteAlertsElement;
  };

  interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {}
  var HTMLCalciteButtonElement: {
    prototype: HTMLCalciteButtonElement;
    new (): HTMLCalciteButtonElement;
  };

  interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {}
  var HTMLCalciteCheckboxElement: {
    prototype: HTMLCalciteCheckboxElement;
    new (): HTMLCalciteCheckboxElement;
  };

  interface HTMLCalciteDateDayElement extends Components.CalciteDateDay, HTMLStencilElement {}
  var HTMLCalciteDateDayElement: {
    prototype: HTMLCalciteDateDayElement;
    new (): HTMLCalciteDateDayElement;
  };

  interface HTMLCalciteDateMonthElement extends Components.CalciteDateMonth, HTMLStencilElement {}
  var HTMLCalciteDateMonthElement: {
    prototype: HTMLCalciteDateMonthElement;
    new (): HTMLCalciteDateMonthElement;
  };

  interface HTMLCalciteDateMonthHeaderElement extends Components.CalciteDateMonthHeader, HTMLStencilElement {}
  var HTMLCalciteDateMonthHeaderElement: {
    prototype: HTMLCalciteDateMonthHeaderElement;
    new (): HTMLCalciteDateMonthHeaderElement;
  };

  interface HTMLCalciteDatePickerElement extends Components.CalciteDatePicker, HTMLStencilElement {}
  var HTMLCalciteDatePickerElement: {
    prototype: HTMLCalciteDatePickerElement;
    new (): HTMLCalciteDatePickerElement;
  };

  interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {}
  var HTMLCalciteDropdownElement: {
    prototype: HTMLCalciteDropdownElement;
    new (): HTMLCalciteDropdownElement;
  };

  interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {}
  var HTMLCalciteDropdownGroupElement: {
    prototype: HTMLCalciteDropdownGroupElement;
    new (): HTMLCalciteDropdownGroupElement;
  };

  interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {}
  var HTMLCalciteDropdownItemElement: {
    prototype: HTMLCalciteDropdownItemElement;
    new (): HTMLCalciteDropdownItemElement;
  };

  interface HTMLCalciteExampleElement extends Components.CalciteExample, HTMLStencilElement {}
  var HTMLCalciteExampleElement: {
    prototype: HTMLCalciteExampleElement;
    new (): HTMLCalciteExampleElement;
  };

  interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {}
  var HTMLCalciteLoaderElement: {
    prototype: HTMLCalciteLoaderElement;
    new (): HTMLCalciteLoaderElement;
  };

  interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {}
  var HTMLCalciteModalElement: {
    prototype: HTMLCalciteModalElement;
    new (): HTMLCalciteModalElement;
  };

  interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {}
  var HTMLCalciteProgressElement: {
    prototype: HTMLCalciteProgressElement;
    new (): HTMLCalciteProgressElement;
  };

  interface HTMLCalciteRadioGroupElement extends Components.CalciteRadioGroup, HTMLStencilElement {}
  var HTMLCalciteRadioGroupElement: {
    prototype: HTMLCalciteRadioGroupElement;
    new (): HTMLCalciteRadioGroupElement;
  };

  interface HTMLCalciteRadioGroupItemElement extends Components.CalciteRadioGroupItem, HTMLStencilElement {}
  var HTMLCalciteRadioGroupItemElement: {
    prototype: HTMLCalciteRadioGroupItemElement;
    new (): HTMLCalciteRadioGroupItemElement;
  };

  interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {}
  var HTMLCalciteSliderElement: {
    prototype: HTMLCalciteSliderElement;
    new (): HTMLCalciteSliderElement;
  };

  interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {}
  var HTMLCalciteSwitchElement: {
    prototype: HTMLCalciteSwitchElement;
    new (): HTMLCalciteSwitchElement;
  };

  interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {}
  var HTMLCalciteTabElement: {
    prototype: HTMLCalciteTabElement;
    new (): HTMLCalciteTabElement;
  };

  interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {}
  var HTMLCalciteTabNavElement: {
    prototype: HTMLCalciteTabNavElement;
    new (): HTMLCalciteTabNavElement;
  };

  interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {}
  var HTMLCalciteTabTitleElement: {
    prototype: HTMLCalciteTabTitleElement;
    new (): HTMLCalciteTabTitleElement;
  };

  interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {}
  var HTMLCalciteTabsElement: {
    prototype: HTMLCalciteTabsElement;
    new (): HTMLCalciteTabsElement;
  };

  interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {}
  var HTMLCalciteTreeElement: {
    prototype: HTMLCalciteTreeElement;
    new (): HTMLCalciteTreeElement;
  };

  interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {}
  var HTMLCalciteTreeItemElement: {
    prototype: HTMLCalciteTreeItemElement;
    new (): HTMLCalciteTreeItemElement;
  };
  interface HTMLElementTagNameMap {
    'calcite-alert': HTMLCalciteAlertElement;
    'calcite-alerts': HTMLCalciteAlertsElement;
    'calcite-button': HTMLCalciteButtonElement;
    'calcite-checkbox': HTMLCalciteCheckboxElement;
    'calcite-date-day': HTMLCalciteDateDayElement;
    'calcite-date-month': HTMLCalciteDateMonthElement;
    'calcite-date-month-header': HTMLCalciteDateMonthHeaderElement;
    'calcite-date-picker': HTMLCalciteDatePickerElement;
    'calcite-dropdown': HTMLCalciteDropdownElement;
    'calcite-dropdown-group': HTMLCalciteDropdownGroupElement;
    'calcite-dropdown-item': HTMLCalciteDropdownItemElement;
    'calcite-example': HTMLCalciteExampleElement;
    'calcite-loader': HTMLCalciteLoaderElement;
    'calcite-modal': HTMLCalciteModalElement;
    'calcite-progress': HTMLCalciteProgressElement;
    'calcite-radio-group': HTMLCalciteRadioGroupElement;
    'calcite-radio-group-item': HTMLCalciteRadioGroupItemElement;
    'calcite-slider': HTMLCalciteSliderElement;
    'calcite-switch': HTMLCalciteSwitchElement;
    'calcite-tab': HTMLCalciteTabElement;
    'calcite-tab-nav': HTMLCalciteTabNavElement;
    'calcite-tab-title': HTMLCalciteTabTitleElement;
    'calcite-tabs': HTMLCalciteTabsElement;
    'calcite-tree': HTMLCalciteTreeElement;
    'calcite-tree-item': HTMLCalciteTreeItemElement;
  }
}

declare namespace LocalJSX {
  interface CalciteAlert extends JSXBase.HTMLAttributes<HTMLCalciteAlertElement> {
    /**
    * Color for the alert (will apply to top border and icon)
    */
    'color'?: "blue" | "green" | "red" | "yellow";
    /**
    * Close the alert automatically (recommended for passive, non-blocking alerts)
    */
    'dismiss'?: boolean;
    /**
    * Length before autodismissal (only used with `dismiss`)
    */
    'duration'?: "fast" | "medium" | "slow";
    /**
    * If false, no icon will be shown in the alert
    */
    'icon'?: boolean;
    /**
    * Fired when an alert is closed
    */
    'onCalciteAlertClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when an alert is opened
    */
    'onCalciteAlertOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteAlerts extends JSXBase.HTMLAttributes<HTMLCalciteAlertsElement> {
    /**
    * emits the ID of the alert to be closed, and the current alertQueue and currentAlert
    */
    'onCalciteAlertsClose'?: (event: CustomEvent<any>) => void;
    /**
    * emits the ID of the alert to be opened, and the current alertQueue and currentAlert
    */
    'onCalciteAlertsOpen'?: (event: CustomEvent<any>) => void;
  }
  interface CalciteButton extends JSXBase.HTMLAttributes<HTMLCalciteButtonElement> {
    /**
    * specify the appearance style of the button, defaults to solid. Specifying "inline" will render the component as an anchor
    */
    'appearance'?: | "solid"
    | "outline"
    | "clear"
    | "inline";
    /**
    * specify the color of the button, defaults to blue
    */
    'color'?: | "blue"
    | "dark"
    | "light"
    | "red";
    /**
    * optionally pass a href - used to determine if the component should render as a button or an anchor
    */
    'href'?: string;
    /**
    * optionally pass icon path data to be positioned within the button - pass only raw path data from calcite ui helper
    */
    'icon'?: string;
    /**
    * optionally add a calcite-loader component inline to indicate loading is occuring. You can add and remove this prop depending on status
    */
    'loading'?: boolean;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale'?: "xs" | "s" | "m" | "l" | "xl";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * specify the width of the button, defaults to auto
    */
    'width'?: "auto" | "half" | "full";
  }
  interface CalciteCheckbox extends JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement> {
    /**
    * True if the checkbox is initially checked
    */
    'checked'?: boolean;
    /**
    * True if the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
    */
    'indeterminate'?: boolean;
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * Emitted when the checkbox checked status changes
    */
    'onCalciteCheckboxChange'?: (event: CustomEvent<any>) => void;
    /**
    * Size of the checkbox
    */
    'size'?: "small" | "large";
    /**
    * Determines what theme to use
    */
    'theme'?: "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteDateDay extends JSXBase.HTMLAttributes<HTMLCalciteDateDayElement> {
    /**
    * Active tells whether day is Actively in focus.
    */
    'active'?: boolean;
    /**
    * day of the month to be shown.
    */
    'day'?: number;
    /**
    * Enables tells whether day enabled for the user click.
    */
    'enable'?: boolean;
    /**
    * When user selects day it emits the event.
    */
    'onCalciteDaySelect'?: (event: CustomEvent<any>) => void;
    /**
    * Selected tells whether day is selected.
    */
    'selected'?: boolean;
  }
  interface CalciteDateMonth extends JSXBase.HTMLAttributes<HTMLCalciteDateMonthElement> {
    /**
    * Date currently active.
    */
    'activeDate'?: Date;
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max'?: Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min'?: Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month'?: number;
    /**
    * Active date for the user keyboard access.
    */
    'onCalciteActiveDateChange'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when user selects the date.
    */
    'onCalciteDateSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Already selected date.
    */
    'selectedDate'?: Date;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Year for which the calendar is shown.
    */
    'year'?: number;
  }
  interface CalciteDateMonthHeader extends JSXBase.HTMLAttributes<HTMLCalciteDateMonthHeaderElement> {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max'?: Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min'?: Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month'?: number;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Event triggered when user change month.
    */
    'onCalciteMonthChange'?: (event: CustomEvent<any>) => void;
    /**
    * Event triggered when user change year.
    */
    'onCalciteYearChange'?: (event: CustomEvent<any>) => void;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Already selected date.
    */
    'selectedDate'?: Date;
    /**
    * Year for which the calendar is shown.
    */
    'year'?: number;
  }
  interface CalciteDatePicker extends JSXBase.HTMLAttributes<HTMLCalciteDatePickerElement> {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Value of the form control
    */
    'max'?: string;
    /**
    * Name of the form control (useful for specifying input/label relationship)
    */
    'min'?: string;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Trigger calcite date change when a user changes the date.
    */
    'onCalciteDateChange'?: (event: CustomEvent<any>) => void;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Value of the form control
    */
    'value'?: string;
  }
  interface CalciteDropdown extends JSXBase.HTMLAttributes<HTMLCalciteDropdownElement> {
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'alignment'?: | "left"
    | "right"
    | "center";
    /**
    * specify the scale of dropdrown, defaults to m
    */
    'scale'?: "s" | "m" | "l";
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteDropdownGroup extends JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement> {
    /**
    * optionally set a group title for display
    */
    'grouptitle'?: string;
    'onCalciteDropdownItemHasChanged'?: (event: CustomEvent<any>) => void;
    'onRegisterCalciteDropdownGroup'?: (event: CustomEvent<any>) => void;
  }
  interface CalciteDropdownItem extends JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement> {
    'active'?: boolean;
    'onCalciteDropdownItemKeyEvent'?: (event: CustomEvent<any>) => void;
    'onCalciteDropdownItemSelected'?: (event: CustomEvent<any>) => void;
    'onCloseCalciteDropdown'?: (event: CustomEvent<any>) => void;
    'onRegisterCalciteDropdownItem'?: (event: CustomEvent<any>) => void;
  }
  interface CalciteExample extends JSXBase.HTMLAttributes<HTMLCalciteExampleElement> {
    'onOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'property'?: string;
  }
  interface CalciteLoader extends JSXBase.HTMLAttributes<HTMLCalciteLoaderElement> {
    /**
    * Inline loaders are smaller and will appear to the left of the text
    */
    'inline'?: boolean;
    /**
    * Show the loader
    */
    'isActive'?: boolean;
    /**
    * Text which should appear under the loading indicator (optional)
    */
    'text'?: string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type'?: "indeterminate" | "determinate";
    /**
    * Percent complete of 100, only valid for determinate indicators
    */
    'value'?: number;
  }
  interface CalciteModal extends JSXBase.HTMLAttributes<HTMLCalciteModalElement> {
    /**
    * Optionally pass a function to run before close
    */
    'beforeClose'?: (el: HTMLElement) => Promise<void>;
    /**
    * Aria label for the close button
    */
    'closeLabel'?: string;
    /**
    * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
    */
    'color'?: "red" | "blue";
    /**
    * Prevent the modal from taking up the entire screen on mobile
    */
    'docked'?: boolean;
    /**
    * Specify an element to focus when the modal is first opened
    */
    'firstFocus'?: HTMLElement;
    /**
    * Fired when the modal begins the close animation
    */
    'onCalciteModalClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when the modal begins the open animation
    */
    'onCalciteModalOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Set the overall size of the modal
    */
    'size'?: "small" | "medium" | "large" | "fullscreen";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteProgress extends JSXBase.HTMLAttributes<HTMLCalciteProgressElement> {
    /**
    * Fill bar in the opposite direction
    */
    'reversed'?: boolean;
    /**
    * Text label for the progress indicator
    */
    'text'?: string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type'?: "indeterminate" | "determinate";
    /**
    * Percent complete of 100
    */
    'value'?: number;
  }
  interface CalciteRadioGroup extends JSXBase.HTMLAttributes<HTMLCalciteRadioGroupElement> {
    /**
    * The group's name. Gets submitted with the form.
    */
    'name'?: string;
    'onCalciteRadioGroupChange'?: (event: CustomEvent<any>) => void;
    /**
    * The group's selected item.
    */
    'selectedItem'?: HTMLCalciteRadioGroupItemElement;
    /**
    * The component's theme.
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteRadioGroupItem extends JSXBase.HTMLAttributes<HTMLCalciteRadioGroupItemElement> {
    /**
    * Indicates whether the control is checked.
    */
    'checked'?: boolean;
    'onCalciteRadioGroupItemChange'?: (event: CustomEvent<any>) => void;
    /**
    * The control's value.
    */
    'value'?: any | null;
  }
  interface CalciteSlider extends JSXBase.HTMLAttributes<HTMLCalciteSliderElement> {
    /**
    * Disable and gray out the slider
    */
    'disabled'?: boolean;
    /**
    * Label handles with their numeric value
    */
    'labelHandles'?: boolean;
    /**
    * Label tick marks with their numeric value.
    */
    'labelTicks'?: boolean;
    /**
    * Maximum selectable value
    */
    'max'?: number;
    /**
    * Label for second handle if needed (ex. "Temperature, upper bound")
    */
    'maxLabel'?: string;
    /**
    * Currently selected upper number (if multi-select)
    */
    'maxValue'?: number;
    /**
    * Minimum selectable value
    */
    'min'?: number;
    /**
    * Label for first (or only) handle (ex. "Temperature, lower bound")
    */
    'minLabel'?: string;
    /**
    * Currently selected lower number (if multi-select)
    */
    'minValue'?: number;
    /**
    * Fires on all updates to the slider. :warning: Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
    */
    'onCalciteSliderUpdate'?: (event: CustomEvent<any>) => void;
    /**
    * Interval to move on page up/page down keys
    */
    'pageStep'?: number;
    /**
    * Use finer point for handles
    */
    'precise'?: boolean;
    /**
    * Snap selection along the step interval
    */
    'snap'?: boolean;
    /**
    * Interval to move on up/down keys
    */
    'step'?: number;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * Show tick marks on the number line at provided interval
    */
    'ticks'?: number;
    /**
    * Currently selected number (if single select)
    */
    'value'?: null | number;
  }
  interface CalciteSwitch extends JSXBase.HTMLAttributes<HTMLCalciteSwitchElement> {
    /**
    * What color the switch should be
    */
    'color'?: "red" | "blue";
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    'onCalciteSwitchChange'?: (event: CustomEvent<any>) => void;
    /**
    * True if the switch is initially on
    */
    'switched'?: boolean;
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteTab extends JSXBase.HTMLAttributes<HTMLCalciteTabElement> {
    /**
    * Show this tab
    */
    'isActive'?: boolean;
    /**
    * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
    */
    'tab'?: string;
  }
  interface CalciteTabNav extends JSXBase.HTMLAttributes<HTMLCalciteTabNavElement> {
    /**
    * Emitted when the active tab changes
    */
    'onCalciteTabChange'?: (event: CustomEvent<TabChangeEventDetail>) => void;
    /**
    * Name to use when saving selected tab data to localStorage
    */
    'storageId'?: string;
    /**
    * Pass the same string to multiple tab navs to keep them all in sync if one changes
    */
    'syncId'?: string;
  }
  interface CalciteTabTitle extends JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement> {
    /**
    * Show this tab title as selected
    */
    'isActive'?: boolean;
    /**
    * Fires when a specific tab is activated. `event.details`: [TabChangeEventDetail](../../interfaces/TabChange.ts)
    */
    'onCalciteTabsActivate'?: (event: CustomEvent<TabChangeEventDetail>) => void;
    /**
    * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
    */
    'tab'?: string;
  }
  interface CalciteTabs extends JSXBase.HTMLAttributes<HTMLCalciteTabsElement> {
    /**
    * Align tab titles to the edge or fully justify them across the tab nav ("center")
    */
    'layout'?: "center" | "inline";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteTree extends JSXBase.HTMLAttributes<HTMLCalciteTreeElement> {
    /**
    * Be sure to add a jsdoc comment describing your propery for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'lines'?: boolean;
    'onCalciteTreeSelect'?: (event: CustomEvent<TreeSelectDetail>) => void;
    'root'?: boolean;
    'selectionMode'?: TreeSelectionMode;
    'size'?: "s" | "m";
    'theme'?: "light" | "dark";
  }
  interface CalciteTreeItem extends JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement> {
    'depth'?: number;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'expanded'?: boolean;
    'hasChildren'?: boolean;
    'onCalciteTreeItemSelect'?: (event: CustomEvent<TreeItemSelectDetail>) => void;
    'selected'?: boolean;
  }

  interface IntrinsicElements {
    'calcite-alert': CalciteAlert;
    'calcite-alerts': CalciteAlerts;
    'calcite-button': CalciteButton;
    'calcite-checkbox': CalciteCheckbox;
    'calcite-date-day': CalciteDateDay;
    'calcite-date-month': CalciteDateMonth;
    'calcite-date-month-header': CalciteDateMonthHeader;
    'calcite-date-picker': CalciteDatePicker;
    'calcite-dropdown': CalciteDropdown;
    'calcite-dropdown-group': CalciteDropdownGroup;
    'calcite-dropdown-item': CalciteDropdownItem;
    'calcite-example': CalciteExample;
    'calcite-loader': CalciteLoader;
    'calcite-modal': CalciteModal;
    'calcite-progress': CalciteProgress;
    'calcite-radio-group': CalciteRadioGroup;
    'calcite-radio-group-item': CalciteRadioGroupItem;
    'calcite-slider': CalciteSlider;
    'calcite-switch': CalciteSwitch;
    'calcite-tab': CalciteTab;
    'calcite-tab-nav': CalciteTabNav;
    'calcite-tab-title': CalciteTabTitle;
    'calcite-tabs': CalciteTabs;
    'calcite-tree': CalciteTree;
    'calcite-tree-item': CalciteTreeItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


