/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-action-group-columns: [Deprecated] Sets number of grid-template-columns when the `layout` property is `"grid"`.
 * @prop --calcite-action-group-gap: [Deprecated] Sets the gap (gutters) between rows and columns when the `layout` property is `"grid"`.
 * @prop --calcite-action-group-padding: [Deprecated] Sets the padding when the `layout` property is `"grid"`.
 */

:host {
  @extend %component-host;
  @apply flex
  flex-col
  p-0;

  --calcite-internal-action-group-columns: 3;

  border-style: none;
  border-block-end-style: solid;
  border-width: var(--calcite-border-width-sm);
  border-color: var(--calcite-action-group-border-color, var(--calcite-color-border-3));
}

.container {
  @apply flex-col flex-grow;
  display: var(--calcite-internal-action-group-display, flex);
  background-color: var(--calcite-action-group-background, var(--calcite-internal-action-group-background-color));
}

// :host([columns="1 - 6"])
@for $i from 1 through 6 {
  :host([columns="#{$i}"]) {
    --calcite-internal-action-group-columns: $i;
  }
}

:host(:first-child) {
  padding-block-start: 0;
}
:host(:last-child) {
  border-block-end: 0;
  border-inline-end: 0;
}

:host([layout="horizontal"]),
:host([layout="horizontal"]) .container {
  @apply flex-row;
}

:host([layout="grid"]) {
  @apply grid;
}

:host([layout="grid"]) .container {
  --calcite-internal-action-group-space: var(--calcite-spacing-px);
  --calcite-internal-action-group-display: grid;
  --calcite-internal-action-group-background-color: var(--calcite-color-background);
  @apply place-content-stretch;

  gap: var(--calcite-action-group-gap, var(--calcite-internal-action-group-space));
  padding: var(--calcite-action-group-gap, var(--calcite-internal-action-group-space));
  grid-template-columns: repeat(
    var(--calcite-action-group-columns, var(--calcite-internal-action-group-columns)),
    auto
  );
}

@include base-component();
