/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-action-background-color: Specifies the component's background color.
 * @prop --calcite-action-group-border-color: Specifies the component's border color when used in a calcite-action-bar or calcite-action-menu.
 * @prop --calcite-action-group-columns: Specifies the component's grid-template-columns when the `layout` property is `"grid"`.
 * @prop --calcite-action-group-gap: Specifies the component's gap (gutters) between rows and columns and padding around the component, when the `layout` property is `"grid"`.
 * @prop --calcite-action-group-padding: [Deprecated] Use --calcite-action-group-gap. Sets the padding when the `layout` property is `"grid"`.
 *
 */

:host {
  @extend %component-host;

  @apply flex
  flex-col
  p-0;
}

.container {
  @apply flex flex-col flex-grow;
}

:host([columns="1"]) {
  --calcite-internal-action-group-columns: 1;
}
:host([columns="2"]) {
  --calcite-internal-action-group-columns: 2;
}
:host([columns="3"]) {
  --calcite-internal-action-group-columns: 3;
}
:host([columns="4"]) {
  --calcite-internal-action-group-columns: 4;
}
:host([columns="5"]) {
  --calcite-internal-action-group-columns: 5;
}
:host([columns="6"]) {
  --calcite-internal-action-group-columns: 6;
}

:host(:first-child) {
  @apply pt-0;
}

:host([layout="horizontal"]),
:host([layout="horizontal"]) .container {
  @apply flex-row;
}

:host([layout="grid"]) {
  @apply grid;
}

:host([layout="grid"]) .container {
  @apply grid
  place-content-stretch;
  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
  gap: var(--calcite-action-group-gap, theme("gap.px"));
  padding: var(--calcite-action-group-gap, theme("gap.px"));
  grid-template-columns: repeat(
    var(--calcite-action-group-columns, var(--calcite-internal-action-group-columns, 3)),
    auto
  );
}

@include base-component();
