/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-action-background-color: Specifies the component's background color.
 * @prop --calcite-action-corner-radius: Specifies the component's corner radius.
 * @prop --calcite-action-indicator-color: Specifies the component's indicator color.
 * @prop --calcite-action-text-color: Specifies the component's text color.

 * @prop --calcite-action-background-color-hover: [Deprecated] Use --calcite-action-background-color when the component is hovered. Specifies the component's background color on hover.
 * @prop --calcite-action-background-color-pressed: [Deprecated] Use --calcite-action-background-color-pressed when the component is active. Specifies the component's background color on press.
 * @prop --calcite-action-corner-radius-end-end: [Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius on the end end.
 * @prop --calcite-action-corner-radius-end-start: [Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius on the end start.
 * @prop --calcite-action-corner-radius-start-end: [Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius on the start end.
 * @prop --calcite-action-corner-radius-start-start: [Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius on the start start.
 * @prop --calcite-action-text-color-pressed: [Deprecated] Use --calcite-action-text-color when component is active. Specifies the component's text color when active.
*/

@mixin action-indicator() {
  position: relative;
  &::after {
    content: "";
    @apply absolute
      h-2
      w-2
      rounded-full;
    inset-block-end: calc(-0.275rem);
    inset-inline-end: calc(-0.275rem);
    background-color: var(--calcite-action-indicator-color, theme("colors.brand"));
  }
}

$corner-radius-fallback: var(--calcite-action-corner-radius-start-start, var(--calcite-corner-radius))
  var(--calcite-action-corner-radius-start-end, var(--calcite-corner-radius))
  var(--calcite-action-corner-radius-end-end, var(--calcite-corner-radius))
  var(--calcite-action-corner-radius-end-start, var(--calcite-corner-radius));

:host {
  @extend %component-host;
  @apply flex bg-transparent;
  border-radius: var(--calcite-action-corner-radius, $corner-radius-fallback);
}

.button {
  @apply focus-base
    text-n2h
    relative
    m-0
    flex
    w-auto
    cursor-pointer
    items-center
    justify-start
    border-none
    font-medium
    font-sans;
  border-radius: inherit;
  color: var(--calcite-action-text-color, var(--calcite-color-text-3));
  text-align: unset;
  flex: 1 0 auto;
}

:host([active], :hover, :focus) .button {
  color: var(--calcite-action-text-color, var(--calcite-action-text-color-hover, var(--calcite-color-text-1)));
}

:host(:active) .button {
  color: var(--calcite-action-text-color, var(--calcite-action-text-color-pressed, var(--calcite-color-text-2)));
}

:host(:focus) .button {
  @apply focus-inset;
}

:host([loading]) {
  .text-container {
    @apply opacity-disabled;
  }

  calcite-loader[inline] {
    margin-inline-end: theme("spacing.0");
  }

  &:host(:hover, :focus, :active) .button {
    color: var(--calcite-action-text-color, var(--calcite-color-text-3));
  }
}

:host([appearance="solid"]) {
  .button {
    background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
  }

  &:host(:hover, :focus) {
    .button {
      background-color: var(
        --calcite-action-background-color,
        var(--calcite-action-background-color-hover, var(--calcite-color-foreground-2))
      );
    }
  }
  &:host(:active) .button {
    background-color: var(
      --calcite-action-background-color,
      var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3))
    );
  }
  &:host([active]) {
    &:host(:hover, :focus) .button {
      background-color: var(
        --calcite-action-background-color,
        var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3))
      );
    }
    &:host(:active) .button {
      background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
    }
  }

  &:host([loading]):host(:hover, :focus, :active) .button {
    background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
  }
}

:host([appearance="transparent"]) {
  .button {
    @apply bg-transparent
      transition-shadow
      duration-150
      ease-in-out;
  }

  &:host(:hover, :focus) .button {
    background-color: var(--calcite-color-transparent-hover);
  }

  &:host(:active) .button {
    background-color: var(--calcite-color-transparent-press);
  }

  &:host([active]) {
    .button,
    &:host(:hover, :focus) .button {
      background-color: var(--calcite-color-transparent-press);
    }

    &:host(:active) .button {
      background-color: var(--calcite-color-transparent);
    }
  }

  &:host([loading]):host(:hover, :focus, :active) .button {
    background-color: var(--calcite-color-transparent);
  }
}

.icon-container {
  @apply pointer-events-none
    m-0
    flex
    items-center
    justify-center;
  min-inline-size: theme("spacing.4");
  min-block-size: theme("spacing.6");
}

.text-container {
  @apply m-0
    w-0
    truncate
    leading-6
    opacity-0
    transition-opacity
    duration-150
    ease-in-out;

  transition-property: margin;
  transition-property: inline-size;
}

.text-container--visible {
  @apply w-auto flex-auto opacity-100;
}

:host([data-active]) .button {
  @apply focus-inset;
}

:host([scale="s"]) {
  .button {
    @apply text-n2h px-2 py-1 font-normal;
  }
  .button--text-visible .icon-container {
    margin-inline-end: theme("spacing.2");
  }
}

:host([scale="m"]) {
  .button {
    @apply text-n1h px-4 py-3 font-normal;
  }
  .button--text-visible .icon-container {
    margin-inline-end: theme("spacing.3");
  }
}

:host([scale="l"]) {
  .button {
    @apply text-0h p-5 font-normal;
  }
  .button--text-visible .icon-container {
    margin-inline-end: theme("spacing.4");
  }
}

:host([alignment="center"]) .button {
  @apply justify-center;
}

:host([alignment="end"]) .button {
  @apply justify-end;
}

:host([alignment="center"]),
:host([alignment="end"]) {
  .button .text-container--visible {
    @apply flex-initial;
  }
}

/* [Deprecated]  Compact */
:host([scale="s"][compact]) .button,
:host([scale="m"][compact]) .button,
:host([scale="l"][compact]) .button {
  @apply px-0;
}

.slot-container {
  @apply flex;
}

.slot-container--hidden {
  @apply hidden;
}

.button--text-visible {
  @apply w-full;
}

.indicator-with-icon {
  @include action-indicator();
}

.indicator-without-icon {
  @apply w-4 mx-1;
  @include action-indicator();
}

.indicator-text {
  @apply sr-only;
}

@include base-component();
@include disabled {
  .button,
  .button:hover,
  .button:focus {
    @apply opacity-disabled bg-foreground-1 cursor-default;
  }

  &:host([active]) {
    .button,
    .button:hover,
    .button:focus {
      @apply opacity-disabled bg-foreground-3;
    }
  }
}
