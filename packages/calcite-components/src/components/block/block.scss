/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-block-border-color: Specifies the border color of the component.
 * @prop --calcite-block-content-space: Specifies the space of the component's `default` slot.
 * @prop --calcite-block-content-start-space: Specifies the space of the component's content-start.
 * @prop --calcite-block-content-start-text-color: Specifies the text-color of the component's content-start.
 * @prop --calcite-block-description-text-color: Specifies the text color of the component's description.
 * @prop --calcite-block-header-space: Specifies the space of the component's header.
 * @prop --calcite-block-header-background-color: Specifies the background color of the component's header.
 * @prop --calcite-block-header-background-color-hover: Specifies the background color of the component's header when hovered.
 * @prop --calcite-block-header-icon-text-color: Specifies the text color of the component's header icon.
 * @prop --calcite-block-header-text-color: Specifies the text color of the component's header.
 * @prop --calcite-block-icon-space: Specifies the space of the component's icon.
 * @prop --calcite-block-icon-text-color: Specifies the text color of the component's icon.
 * @prop --calcite-block-padding: [Deprecated] use `--calcite-block-content-space` instead - Specifies the padding of the component's `default` slot.

 */

:host {
  @extend %component-host;
  @extend %component-spacing;
  @apply transition-margin ease-cubic flex flex-shrink-0 flex-grow-0
    flex-col border-0 border-b border-solid p-0;
  flex-basis: auto;
  transition-duration: var(--calcite-animation-timing);
  border-color: var(--calcite-block-border-color, var(--calcite-color-border-3));
}

@include disabled();

@import "../../assets/styles/animation";
@import "../../assets/styles/header";

.header {
  @apply justify-start;
}

.header--has-text {
  padding: var(--calcite-block-header-space, var(--calcite-spacing-md));
}

.header,
.toggle {
  grid-area: header;
}

.header-container {
  @apply grid items-stretch;
  grid-template: auto / auto 1fr auto auto;
  grid-template-areas: "handle header control menu actions-end";
  grid-column: header-start / actions-end;
  grid-row: 1 / 2;
}

.content-start {
  margin-inline-end: var(--calcite-block-content-start-space, var(--calcite-spacing-md));
}

.icon,
.icon--start,
.icon--end {
  margin-inline-end: var(--calcite-block-icon-space, var(--calcite-spacing-md));
}

.icon {
  & calcite-loader {
    margin-inline-end: var((--calcite-block-icon-space), var(--calcite-spacing-xxxs));
  }
}

.icon--start,
.icon--end {
  color: var(--calcite-block-icon-text-color, var(--calcite-color-text-3));
}

.actions-end {
  grid-area: actions-end;
}

.toggle {
  @apply font-sans
    focus-base
    flex
    cursor-pointer
    flex-nowrap
    items-center
    justify-between
    border-none;

  text-align: initial;
  background-color: var(--calcite-block-header-background-color, transparent);
  margin: var(--calcite-block-header-space, 0);
  padding: var(--calcite-block-header-space, 0);

  &:hover {
    background-color: var(--calcite-block-header-background-color-hover, var(--calcite-color-foreground-2));
  }
  &:focus {
    @apply focus-inset;
  }
}

calcite-loader[inline] {
  grid-area: control;
  @apply self-center;
}

calcite-handle {
  grid-area: handle;
}

.title {
  @apply m-0;
}

.header .title .heading {
  @apply text-n1
    word-break
    transition-color
    font-medium
    leading-tight
    duration-150
    ease-in-out;

  color: var(--calcite-block-header-text-color, var(--calcite-color-text-2));
  padding: var(--calcite-block-header-space, 0);
}

.description {
  @apply text-n2-wrap
    word-break
    mt-0.5
    p-0;

  color: var(--calcite-block-description-text-color, var(--calcite-color-text-3));
}

.icon {
  @apply flex;
}

.status-icon.valid {
  color: theme("colors.success");
}

.status-icon.invalid {
  color: theme("colors.danger");
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.icon-end-container {
  @apply flex items-center;

  margin-inline-start: auto;
}

.toggle-icon {
  @apply transition-color
  self-center
  justify-self-end
  duration-150
  ease-in-out;

  margin-inline-end: var(--calcite-spacing-md);
  color: var(--calcite-block-header-icon-text-color, var(--calcite-color-text-3));
}

.toggle:hover .toggle-icon {
  color: var(--calcite-block-header-icon-text-color, var(--calcite-color-text-1));
}

.container {
  @apply flex flex-col h-full relative;
}

.content {
  @apply animate-in flex-1 relative min-h-0;
  padding-block: var(--calcite-block-content-space, var(--calcite-spacing-sm));
  padding-inline: var(---calcite-block-content-space, var(--calcite-spacing-md));
}

.content-start {
  @apply flex items-center;

  color: var(--calcite-block-content-start-text-color, var(--calcite-color-text-3));
}

.control-container {
  @apply m-0 flex;
  grid-area: control;
}

calcite-action-menu {
  grid-area: menu;
}

.actions-end {
  @apply flex items-stretch;
}

:host([open]) {
  @apply my-2;

  .header .title .heading {
    @apply text-color-1;
  }
}

@include base-component();
