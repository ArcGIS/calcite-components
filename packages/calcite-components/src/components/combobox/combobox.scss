/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-combobox-border: defines the border around the combobox input and dropdown. References the --calcite-combobox-border-color by default.
 * @prop --calcite-combobox-border-color: defines the border color around the combobox input and dropdown.
 * @prop --calcite-combobox-background-color: defines the background color of the combobox.
 * @prop --calcite-combobox-text-color: defines the text color of the combobox.
 * @prop --calcite-combobox-z-index: defines the z-index of the combobox list
 *
 * Input
 * @prop --calcite-combobox-input-height: defines the height of the component's input.
 *
 * Calcite-Chip
 * @prop --calcite-combobox-chip-background-color: defines the background color of a combobox chip.
 * @prop --calcite-combobox-chip-background-color-active: defines the background color of a combobox chip.
 * @prop --calcite-combobox-chip-border-color: defines the border color in a chip component in a combobox.
 * @prop --calcite-combobox-chip-box-shadow: defines the box shadow of a chip component in a combobox.
 * @prop --calcite-combobox-chip-corner-radius: defines the corner radius of a chip component in a combobox.
 * @prop --calcite-combobox-chip-icon-color: defines the icon color of a chip component in a combobox.
 * @prop --calcite-combobox-chip-text-color: defines the text color of a chip component in a combobox.
 * @prop --calcite-combobox-chip-close-icon-color: defines the close icon of a chip component in a combobox.
 * @prop --calcite-combobox-chip-close-background-color: defines the close background color of a chip component in a combobox.
 
 * Calcite-Icon
 * @prop --calcite-combobox-icon-color: defines the color of icons in the combobox.
 */

/*
 * Internal
 *
 * --calcite-internal-combobox-dropdown-width: defines the width of the dropdown list. Inherits from "--calcite-dropdown-width".
 * --calcite-combobox-item-spacing-unit-l: *deprecated* in favor of --calcite-internal-combobox-spacing-inline which is more descriptive.
 * --calcite-internal-combobox-spacing-inline: defines the inline spacing of the combobox-item. Set via the [scale] prop on a combobox-item.
 * --calcite-combobox-item-spacing-unit-s: *deprecated* in favor of --calcite-internal-combobox-spacing-block which is more descriptive.
 * --calcite-internal-combobox-spacing-block: defines the block spacing of the combobox-item. Set via the [scale] prop on a combobox-item.
 * --calcite-internal-combobox-input-margin-block: defines the block size of the combobox's input element margin.
 */

:host {
  --calcite-combobox-background-color: var(--calcite-color-foreground-1);
  --calcite-combobox-border: var(--calcite-border-width-sm, 1px) solid
    var(--calcite-combobox-border-color, var(--calcite-color-border-input));
  --calcite-internal-combobox-dropdown-width: var(--calcite-dropdown-width);
  @apply relative block;
}

@include disabled();
@include xButton();

:host([scale="s"]) {
  @apply text-n2;

  --calcite-internal-combobox-spacing-inline: theme("spacing.2");
  --calcite-internal-combobox-spacing-block: theme("spacing.1");
  --calcite-combobox-input-height: theme("spacing.4");
  --calcite-internal-combobox-input-margin-block: calc(theme("spacing.1") - theme("borderWidth.DEFAULT"));

  .x-button {
    margin-inline: theme("spacing.2");
  }
}

:host([scale="m"]) {
  @apply text-n1;
  --calcite-internal-combobox-spacing-inline: theme("spacing.3");
  --calcite-internal-combobox-spacing-block: theme("spacing.2");
  --calcite-combobox-input-height: theme("spacing.4");
  --calcite-internal-combobox-input-margin-block: calc(theme("spacing.2") - theme("borderWidth.DEFAULT"));

  .x-button {
    margin-inline-end: theme("spacing.3");
  }
}

:host([scale="l"]) {
  @apply text-0;
  --calcite-internal-combobox-spacing-inline: theme("spacing.4");
  --calcite-internal-combobox-spacing-block: theme("spacing.3");
  --calcite-combobox-input-height: theme("spacing.6");
  --calcite-internal-combobox-input-margin-block: calc(theme("spacing[2.5]") - theme("borderWidth.DEFAULT"));

  .x-button {
    margin-inline-end: theme("spacing.4");
  }
}

.wrapper {
  @apply focus-base
    flex;
  background-color: var(--calcite-combobox-background-color);
  color: var(--calcite-combobox-text-color, var(--calcite-color-text-1));
  padding-block: calc(var(--calcite-internal-combobox-spacing-block) / 4);
  padding-inline: var(--calcite-internal-combobox-spacing-inline);
}

.wrapper,
.floating-ui-container {
  border: var(--calcite-combobox-border);
}

:host(:focus-within) .wrapper,
.wrapper--active {
  @apply focus-inset;
}

:host([status="invalid"]) {
  --calcite-combobox-border-color: var(--calcite-color-status-danger);
}

:host([status="invalid"]:focus-within) .wrapper {
  @apply focus-inset-danger;
}

.wrapper--single {
  padding-block: 0;
  padding-inline: var(--calcite-internal-combobox-spacing-inline);
  @apply cursor-pointer flex-nowrap;
}

.grid-input {
  @apply flex
    flex-grow
    flex-wrap
    items-center
    relative
    truncate
    p-0;

  gap: var(--calcite-internal-combobox-spacing-block);

  &.selection-display-fit,
  &.selection-display-single {
    @apply flex-nowrap overflow-hidden;
  }
}

.input {
  @apply appearance-none
  border-none
  flex-grow
  font-inherit
  text-ellipsis
  p-0;
  background-color: var(--calcite-color-transparent);
  color: var(--calcite-combobox-text-color, var(--calcite-color-text-1));
  font-size: inherit;
  block-size: calc(var(--calcite-combobox-input-height) + 0.1rem);
  line-height: var(--calcite-combobox-input-height);
  inline-size: var(--calcite-container-size-content-fluid);
  margin-block-end: var(--calcite-internal-combobox-spacing-block);
  min-inline-size: 4.8125rem;
  &:focus {
    @apply outline-none;
  }
  &:placeholder-shown {
    @apply text-ellipsis;
  }
}

.input--transparent {
  @apply opacity-0;
}

.input--single {
  @apply p-0;
  margin-block: var(--calcite-internal-combobox-input-margin-block);
}

.wrapper--active .input-single {
  @apply cursor-text;
}

.input--hidden {
  @apply pointer-events-none
  w-0
  min-w-0
  opacity-0;
}

.input--icon {
  padding-block: 0;
  padding-inline: var(--calcite-internal-combobox-spacing-block);
}

:host([scale="m"]) .input--icon,
:host([scale="l"]) .input--icon {
  padding-inline: 0.25rem;
}

.input-wrap {
  @apply flex flex-grow items-center;
}

.input-wrap--single {
  @apply flex-1 overflow-hidden;
}

.label {
  @apply pointer-events-none
    flex
    max-w-full
    flex-auto
    truncate
    p-0
    font-normal;
  block-size: var(--calcite-combobox-input-height);
  line-height: var(--calcite-combobox-input-height);
}

.label--icon {
  padding-inline: var(--calcite-internal-combobox-spacing-inline);
}

.icon-end,
.icon-start {
  @apply flex cursor-pointer items-center;
}

.icon-end {
  @apply flex-none;
}

.floating-ui-container {
  --calcite-floating-ui-z-index: var(--calcite-combobox-z-index, var(--calcite-z-index-dropdown));
  @include floatingUIContainer();
  @include floatingUIWrapper();
}

@include floatingUIElemAnim(".floating-ui-container");

.floating-ui-container--active {
  @include floatingUIWrapperActive();
}

@media (forced-colors: active) {
  :host {
    --calcite-combobox-border-color: canvasText;
  }
}

.screen-readers-only {
  @apply sr-only;
}

.list-container {
  @apply max-h-menu
    overflow-y-auto;
  background-color: var(--calcite-combobox-background-color);
  inline-size: var(--calcite-internal-combobox-dropdown-width);
}

.list {
  @apply m-0 block p-0;
}

.list--hide {
  @apply h-0 overflow-hidden;
}

calcite-icon {
  --calcite-icon-color: var(--calcite-combobox-icon-color);
}

calcite-chip {
  --calcite-animation-timing: 0;
  --calcite-chip-border-color: var(--calcite-combobox-chip-border-color) --calcite-chip-background-color:
    var(--calcite-combobox-chip-background-color);
  --calcite-chip-box-shadow: var(--calcite-combobox-chip-box-shadow) --calcite-chip-corner-radius:
    var(--calcite-combobox-chip-corner-radius) --calcite-chip-icon-color: var(--calcite-combobox-chip-icon-color)
    --calcite-chip-text-color: var(--calcite-combobox-chip-text-color) --calcite-chip-close-icon:
    var(--calcite-combobox-chip-close-icon) --calcite-chip-close-background-color:
    var(--calcite-combobox-chip-close-background-color) margin-block:
    calc(var(--calcite-internal-combobox-spacing-block) / 4);
  max-inline-size: var(--calcite-container-size-content-fluid);
}

.chip--active {
  --calcite-combobox-chip-background-color: var(
    --calcite-combobox-chip-background-color-active,
    var(--calcite-color-foreground-3)
  );
}

.chip--invisible {
  @apply absolute invisible;
}

.item {
  @apply block;
}

@include form-validation-message();
@include hidden-form-input();
@include base-component();

::slotted(calcite-combobox-item-group:not(:first-child)) {
  padding-block-start: var(--calcite-internal-combobox-spacing-inline);
}
