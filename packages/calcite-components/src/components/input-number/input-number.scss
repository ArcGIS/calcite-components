/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-input-number-corner-radius: defines the border radius of the component.
 * @prop --calcite-input-number-text-color: defines the text color of the component.
 * @prop --calcite-input-number-border-color: defines the border color of the component.
 * @prop --calcite-input-number-background-color: defines the background color of the component.
 * @prop --calcite-input-number-button-background-color: defines the background color of a button element in the component.
 * @prop --calcite-input-number-button-background-color-hover: defines the background color of a :hover-ed button element in the component.
 * @prop --calcite-input-number-button-background-color-active: defines the background color of an :active button element in the component.
 * @prop --calcite-input-number-icon-color: defines the color of an icon element in the component.
 * @prop --calcite-input-number-button-icon-color-hover: defines the color of an icon element when it's parent is hovered in the component.
 * @prop --calcite-input-number-prefix-text-color: defines the prefix text color in the component.
 * @prop --calcite-input-number-prefix-background-color: defines the prefix background color in the component.
 * @prop --calcite-input-number-suffix-text-color: defines the suffix text color in the component.
 * @prop --calcite-input-number-suffix-background-color: defines the suffix background color in the component.
 * @prop --calcite-input-number-placeholder-text-color: defines the color of placeholder text in the component.
 * @prop --calcite-input-number-shadow: defines the box-shadow of the component.
 *
 */

:host {
  --calcite-input-number-corner-radius: var(--calcite-corner-radius);
  --calcite-input-number-text-color: var(--calcite-color-text-1);
  --calcite-input-number-border-color: var(--calcite-color-border-input);
  --calcite-input-number-background-color: var(--calcite-color-foreground-1);
  --calcite-input-number-shadow: none;
  // Button
  --calcite-input-number-button-background-color: var(--calcite-color-foreground-1);
  --calcite-input-number-button-background-color-hover: var(--calcite-color-foreground-2);
  --calcite-input-number-button-background-color-active: var(--calcite-color-foreground-3);

  // Icon
  --calcite-input-number-icon-color: var(--calcite-color-text-3);
  --calcite-input-number-button-icon-color-hover: var(--calcite-color-text-1);

  // Prefix/Suffix
  --calcite-input-number-prefix-text-color: var(--calcite-color-text-2);
  --calcite-input-number-prefix-background-color: var(--calcite-color-background);
  --calcite-input-number-suffix-text-color: var(--calcite-color-text-2);
  --calcite-input-number-suffix-background-color: var(--calcite-color-background);

  // Placeholder
  --calcite-input-number-placeholder-text-color: var(--calcite-color-text-3);

  // For props that should follow the initial border-color but not change on statechange.
  --calcite-internal-input-number-border-color-base: var(--calcite-color-border-input);

  @apply block;
  box-shadow: var(--calcite-input-number-shadow);
}
:host([readonly]) {
  --calcite-input-number-number-background-color: var(--calcite-color-background);
}
:host(:focus) {
  --calcite-input-number-number-border-color: var(--calcite-color-brand);
  --calcite-input-number-number-text-color: var(--calcite-color-text-1);
}
calcite-icon {
  color: var(--calcite-input-number-number-icon-color);
}
button:hover,
button:active {
  --calcite-input-number-number-icon-color: var(--calcite-input-number-number-icon-color-hover);
}

// scales
:host([scale="s"]) {
  & input,
  & .prefix,
  & .suffix {
    @apply text-n2h h-6 px-2;
  }
  & textarea {
    @apply h-6;
    min-block-size: theme("spacing.6");
  }
  & .number-button-wrapper,
  & .action-wrapper calcite-button,
  & .action-wrapper calcite-button button {
    @apply h-6;
  }
  & input[type="file"] {
    @apply h-6;
  }
  & .clear-button {
    min-block-size: theme("spacing.6");
    min-inline-size: theme("spacing.6");
  }
  & textarea {
    @apply text-n2h
    h-auto
    py-1
    px-2;
  }
}

:host([scale="m"]) {
  & input,
  & .prefix,
  & .suffix {
    @apply text-n1h h-8 px-3;
  }
  & textarea {
    min-block-size: theme("spacing.8");
  }
  & .number-button-wrapper,
  & .action-wrapper calcite-button,
  & .action-wrapper calcite-button button {
    @apply h-8;
  }
  & input[type="file"] {
    @apply h-8;
  }
  & .clear-button {
    min-block-size: theme("spacing.8");
    min-inline-size: theme("spacing.8");
  }
  & textarea {
    @apply text-n1h
      h-auto
      py-2
      px-3;
  }
}

:host([scale="l"]) {
  & input,
  & .prefix,
  & .suffix {
    @apply text-0h h-11 px-4;
  }
  & textarea {
    min-block-size: theme("spacing.11");
  }
  & .number-button-wrapper,
  & .action-wrapper calcite-button,
  & .action-wrapper calcite-button button {
    @apply h-11;
  }
  & input[type="file"] {
    @apply h-11;
  }
  & .clear-button {
    min-block-size: theme("spacing.11");
    min-inline-size: theme("spacing.11");
  }
  & textarea {
    @apply text-0h
      h-auto
      py-3
      px-4;
  }
}

@include disabled() {
  & textarea {
    resize: none;
  }
}

textarea,
input {
  @apply border font-inherit relative m-0
    box-border flex max-h-full w-full max-w-full flex-1 font-normal;

  transition:
    var(--calcite-animation-timing),
    block-size 0,
    outline-offset 0s;
  -webkit-appearance: none;
  border-radius: var(--calcite-input-number-corner-radius);
  color: var(--calcite-input-number-text-color);
  border-color: var(--calcite-input-number-border-color);
  background-color: var(--calcite-input-number-background-color);
}

// states
input {
  @apply border-spacing-1
    border-solid
    text-ellipsis;
  &::placeholder,
  &:-ms-input-number-placeholder,
  &::-ms-input-number-placeholder {
    @apply font-normal;
    color: var(--calcite-input-number-placeholder-text-color);
  }
  &:placeholder-shown {
    @apply text-ellipsis;
  }
}
input[readonly] {
  @apply font-medium;
}
calcite-icon {
  color: var(--calcite-input-number-icon-color);
}
button:hover,
button:active {
  --calcite-input-number-icon-color: var(--calcite-input-number-button-icon-color-hover);
}

//focus
textarea,
input {
  @apply focus-base;
}
textarea:focus,
input:focus {
  @apply focus-inset;
}

:host([status="invalid"]) {
  --calcite-input-number-border-color: var(--calcite-color-status-danger);

  & input:focus,
  & textarea:focus {
    @apply focus-inset-danger;
  }
}

// ICONS

// position icons

:host([scale="s"]) .icon {
  inset-inline-start: theme("spacing.2");
}

:host([scale="m"]) .icon {
  inset-inline-start: theme("spacing.3");
}

:host([scale="l"]) .icon {
  inset-inline-start: theme("spacing.4");
}

// position placeholder/value text in relation to icons

:host([icon][scale="s"]) input {
  padding-inline-start: theme("padding.8");
}

:host([icon][scale="m"]) input {
  padding-inline-start: theme("padding.10");
}

:host([icon][scale="l"]) input {
  padding-inline-start: theme("padding.14");
}

// positioning wrapper for icon and loader

.element-wrapper {
  @apply relative
    order-3
    inline-flex
    flex-1
    items-center;
}

.icon {
  @apply transition-default
    pointer-events-none
    absolute
    block;
}

.icon {
  @apply z-default; // needed for firefox to display the icon properly
}

.clear-button {
  pointer-events: initial;
  @apply focus-base
    order-4
    m-0
    box-border
    flex
    min-h-full
    cursor-pointer
    items-center
    justify-center
    self-stretch
    border
    border-solid;

  background-color: var(--calcite-input-number-button-background-color);
  border-color: var(--calcite-internal-input-number-border-color-base);
  border-inline-start-width: theme("borderWidth.0");

  &:hover {
    @apply transition-default;
    --calcite-input-number-button-background-color: var(--calcite-input-number-button-background-color-hover);

    calcite-icon {
      @apply transition-default;
    }
  }
  &:active {
    --calcite-input-number-button-background-color: var(--calcite-input-number-button-background-color-active);
  }
  &:focus {
    @apply focus-inset;
  }
  &:disabled {
    @apply opacity-disabled;
  }
}

// loading
.loader {
  inset-block-start: 1px;
  inset-inline: 1px;
  @apply pointer-events-none
    absolute
    block;
}

// slotted action
.action-wrapper {
  @apply order-7 flex;
}

// prefix and suffix
.prefix,
.suffix {
  @apply box-border
    flex
    h-auto
    min-h-full
    select-none
    content-center
    items-center
    break-words
    border
    border-solid
    font-medium
    leading-none;
  border-color: var(--calcite-internal-input-number-border-color-base);
}
.prefix {
  color: var(--calcite-input-number-prefix-text-color);
  background-color: var(--calcite-input-number-prefix-background-color);
}
.suffix {
  color: var(--calcite-input-number-suffix-text-color);
  background-color: var(--calcite-input-number-suffix-background-color);
}

.prefix {
  @apply order-2;
  border-inline-end-width: theme("borderWidth.0");
}
.suffix {
  @apply order-5;
  border-inline-start-width: theme("borderWidth.0");
}

// alignment type
:host([alignment="start"]) {
  & textarea,
  & input {
    text-align: start;
  }
}

:host([alignment="end"]) {
  & textarea,
  & input {
    text-align: end;
  }
}

// number buttons
input {
  -moz-appearance: textfield;

  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button {
    -webkit-appearance: none;
    -moz-appearance: textfield;
    @apply m-0;
  }
}

.number-button-wrapper {
  @apply transition-default
    pointer-events-none
    order-6
    box-border
    flex
    flex-col;
}

:host([number-button-type="vertical"]) .wrapper {
  flex-direction: row;
  display: flex;
}

:host([number-button-type="vertical"]) {
  & input,
  textarea {
    @apply order-2;
  }
}

:host([number-button-type="horizontal"]) .calcite--rtl {
  & .number-button-item[data-adjustment="down"] calcite-icon {
    transform: rotate(-90deg);
  }
  & .number-button-item[data-adjustment="up"] calcite-icon {
    transform: rotate(-90deg);
  }
}

.number-button-item.number-button-item--horizontal {
  &[data-adjustment="down"],
  &[data-adjustment="up"] {
    @apply order-1
      max-h-full
      min-h-full
      self-stretch;
    & calcite-icon {
      transform: rotate(90deg);
    }
  }
}

.number-button-item.number-button-item--horizontal[data-adjustment="down"] {
  @apply border
    border-solid;
  border-inline-end-width: theme("borderWidth.0");
}

.number-button-item.number-button-item--horizontal[data-adjustment="up"] {
  @apply order-5;
}

:host([number-button-type="vertical"]) .number-button-item[data-adjustment="down"] {
  @apply border-t-0;
}

.number-button-item {
  max-block-size: 50%;
  min-block-size: 50%;
  pointer-events: initial;
  @apply transition-default
    m-0
    box-border
    flex
    cursor-pointer
    items-center
    self-center
    border
    border-solid
    py-0
    px-2;
  border-color: var(--calcite-internal-input-number-border-color-base);
  border-inline-start-width: theme("borderWidth.0");
  background-color: var(--calcite-input-number-button-background-color);
  & calcite-icon {
    @apply transition-default pointer-events-none;
  }
  &:focus,
  &:hover {
    --calcite-input-number-button-background-color: var(--calcite-input-number-button-background-color-hover);
  }
  &:active {
    --calcite-input-number-button-background-color: var(--calcite-input-number-button-background-color-active);
  }
  &:disabled {
    @apply pointer-events-none;
  }
}

.wrapper {
  @apply relative
    flex
    flex-row
    items-center;
}

:host(.no-bottom-border) input {
  @apply border-b-0;
}

:host(.border-top-color-one) input {
  @apply border-t-color-1;
}

// input needed for higher specificity of these overrides
input {
  &.inline-child {
    @apply transition-default bg-transparent;
    .editing-enabled {
      background-color: inherit;
    }
  }

  &.inline-child:not(.editing-enabled) {
    @apply border-color-transparent
      flex
      cursor-pointer text-ellipsis;
    padding-inline-start: 0;
  }
}
:host([number-button-type="horizontal"]) {
  .wrapper {
    > button:first-child {
      border-start-start-radius: var(--calcite-input-number-corner-radius);
      border-end-start-radius: var(--calcite-input-number-corner-radius);
    }

    > button:last-of-type {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }

  button + button,
  button + div,
  button + div input {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
}
:host([number-button-type="vertical"][type="number"]) {
  input {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
  .number-button-item {
    &:first-child {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
    }
    &:last-child {
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }
}
:host([prefix-text]) {
  input,
  textarea {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
}
:host([suffix-text]) {
  input,
  textarea {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}
:host([suffix-text][type="number"]:not([readonly])) {
  .suffix {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}
:host(:not(:empty)) {
  input {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}
:host(:not([suffix-text], [type="number"]:not([readonly]))) {
  .wrapper:has(+ .validation-container) {
    input {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }
}
.prefix {
  border-start-start-radius: var(--calcite-input-number-corner-radius);
  border-end-start-radius: var(--calcite-input-number-corner-radius);
}
.suffix {
  border-start-end-radius: var(--calcite-input-number-corner-radius);
  border-end-end-radius: var(--calcite-input-number-corner-radius);
}

@include form-validation-message();
@include hidden-form-input();
@include base-component();

:host(:focus) {
  --calcite-input-number-border-color: var(--calcite-color-brand);
}

:host([read-only]) {
  --calcite-input-number-background-color: var(--calcite-color-background);
}

:host([number-button-type="horizontal"]) {
  .wrapper {
    // grid-template-columns: min-content min-content 1fr min-content min-content min-content;
    // grid-template-areas: "numberDesc prefix input suffix numberAsc action";

    > button:first-child {
      border-start-start-radius: var(--calcite-input-number-corner-radius);
      border-end-start-radius: var(--calcite-input-number-corner-radius);
    }

    > button:last-of-type {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }

  button + button,
  button + div,
  button + div input {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
}
:host([number-button-type="vertical"]) {
  input,
  textarea {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
  .number-button-item {
    &:first-child {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
    }
    &:last-child {
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }
}
:host([prefix-text]) {
  input,
  textarea {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
}
:host([suffix-text]) {
  input,
  textarea {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}
:host([suffix-text]:not([read-only])) {
  .suffix {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}

:host([scale="l"]) {
  .resize-icon-wrapper {
    block-size: 18px;
    inline-size: 18px;
  }
}
:host(:not([clearable], [suffix-text], [read-only])) {
  .wrapper:has(+ .validation-container) {
    input {
      border-start-end-radius: var(--calcite-input-number-corner-radius);
      border-end-end-radius: var(--calcite-input-number-corner-radius);
    }
  }
}

.prefix {
  border-start-start-radius: var(--calcite-input-number-corner-radius);
  border-end-start-radius: var(--calcite-input-number-corner-radius);
}
.suffix {
  border-start-end-radius: var(--calcite-input-number-corner-radius);
  border-end-end-radius: var(--calcite-input-number-corner-radius);
}
:host(:not(:empty)) {
  input,
  .clear-button {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
}
::slotted(*) {
  border-start-start-radius: 0;
  border-end-start-radius: 0;
  border-start-end-radius: var(--calcite-input-number-corner-radius);
  border-end-end-radius: var(--calcite-input-number-corner-radius);
}
