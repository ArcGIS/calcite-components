/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-modal-accent-color: Specifies the accent color of the component.
 * @prop --calcite-modal-background-color: Specifies the background color of the component.
 * @prop --calcite-modal-border-color: Specifies the border color of the component.
 * @prop --calcite-modal-close-button-background-color-hover: Specifies the background color of the close button when hovered.
 * @prop --calcite-modal-close-button-background-color: Specifies the background color of the close button.
 * @prop --calcite-modal-close-button-icon-color: Specifies the icon color of the close button.
 * @prop --calcite-modal-content-background-color: Specifies the background color of content placed in the component's `"content"` slot.
 * @prop --calcite-modal-content-background: [Deprecated] Use `--calcite-modal-content-background-color` instead – Specifies the background color of content placed in the component's `"content"` slot.
 * @prop --calcite-modal-content-padding: [Deprecated] Use `--calcite-modal-content-space` instead – Specifies the padding of the component's `"content"` slot.
 * @prop --calcite-modal-corner-radius: Specifies the corner radius of the component.
 * @prop --calcite-modal-height: Specifies the height of the component, using `px`, `em`, `rem`, `vh`, or `%`. Will never exceed the height of the viewport. Will not apply if `fullscreen` if set.
 * @prop --calcite-modal-scrim-background-color: Specifies the background color of the component's scrim.
 * @prop --calcite-modal-scrim-background: [Deprecated] Use `--calcite-modal-scrim-background-color` instead – Specifies the background color of the component's scrim.
 * @prop --calcite-modal-shadow: Specifies the shadow of the component.
 * @prop --calcite-modal-text-color: Specifies the text color of the component.
 * @prop --calcite-modal-width: Specifies the width of the component, using `px`, `em`, `rem`, `vw`, or `%`. Will never exceed the width of the viewport. Will not apply if `fullscreen` if set.
 */

:host {
  --calcite-internal-modal-border-color: var(--calcite-modal-border-color, var(--calcite-color-border-3));
  --calcite-internal-modal-corner-radius: var(--calcite-modal-corner-radius, var(--calcite-corner-radius-round));
  --calcite-internal-modal-hidden-position: translate3d(0, 20px, 0);
  --calcite-internal-modal-shown-position: translate3d(0, 0, 0);

  @apply absolute flex inset-0 opacity-0 z-overlay;
  visibility: hidden !important;
  transition:
    visibility 0ms linear var(--calcite-internal-animation-timing-slow),
    opacity var(--calcite-internal-animation-timing-slow) $easing-function;
}

.content-top[hidden],
.content-bottom[hidden] {
  @apply hidden;
}

.container {
  @apply fixed
    flex
    inset-0
    items-center
    justify-center
    opacity-0
    overflow-y-hidden
    z-overlay;
  visibility: hidden !important;
  transition:
    visibility 0ms linear var(--calcite-internal-animation-timing-slow),
    opacity var(--calcite-internal-animation-timing-slow) $easing-function;

  color: var(--calcite-modal-text-color, var(--calcite-color-text-2));
}

:host([scale="s"]) {
  --calcite-internal-modal-padding: theme("spacing.3");
  --calcite-internal-modal-padding-large: theme("spacing.4");
  --calcite-internal-modal-title-text: theme("fontSize.1h");
  --calcite-internal-modal-content-text: theme("fontSize.n1");
}

:host([scale="m"]) {
  --calcite-internal-modal-padding: theme("spacing.4");
  --calcite-internal-modal-padding-large: theme("spacing.5");
  --calcite-internal-modal-title-text: theme("fontSize.2h");
  --calcite-internal-modal-content-text: theme("fontSize.0");
}

:host([scale="l"]) {
  --calcite-internal-modal-padding: theme("spacing.5");
  --calcite-internal-modal-padding-large: theme("spacing.6");
  --calcite-internal-modal-title-text: theme("fontSize.3h");
  --calcite-internal-modal-content-text: theme("fontSize.1");
}

.scrim {
  --calcite-color-transparent-scrim: #{rgba($calcite-color-neutral-blk-240, $calcite-opacity-85)}; // always use a dark scrim, regardless of light / dark mode
  --calcite-scrim-background-color: var(
    var(--calcite-modal-scrim-background-color),
    var(--calcite-modal-scrim-background, var(--calcite-color-transparent-scrim))
  );
  @apply fixed flex inset-0 overflow-y-hidden;
}

.modal {
  @apply box-border
    flex
    flex-col
    float-none
    m-6
    opacity-0
    overflow-hidden
    pointer-events-none
    w-full
    z-modal;
  -webkit-overflow-scrolling: touch;
  visibility: hidden;
  transition:
    transform var(--calcite-internal-animation-timing-slow) $easing-function,
    visibility 0ms linear var(--calcite-internal-animation-timing-slow),
    opacity var(--calcite-internal-animation-timing-slow) $easing-function;

  background: var(--calcite-modal-background-color, var(--calcite-color-foreground-1));
  box-shadow: var(--calcite-modal-shadow, var(--calcite-shadow-sm));
  border-radius: var(--calcite-internal-modal-corner-radius);

  &--opening {
    &-idle {
      transform: var(--calcite-internal-modal-hidden-position);
    }
    &-active {
      transform: var(--calcite-internal-modal-shown-position);
    }
  }

  &--closing {
    &-idle {
      transform: var(--calcite-internal-modal-shown-position);
    }
    &-active {
      transform: var(--calcite-internal-modal-hidden-position);
    }
  }
}

:host([opened]) {
  @apply opacity-100;
  visibility: visible !important;
  transition-delay: 0ms;
}

.container--open {
  @apply opacity-100;
  visibility: visible !important;
  transition-delay: 0ms;
  .modal {
    @apply pointer-events-auto visible opacity-100;
    transition:
      transform var(--calcite-internal-animation-timing-slow) $easing-function,
      visibility 0ms linear,
      opacity var(--calcite-internal-animation-timing-slow) $easing-function,
      max-inline-size var(--calcite-internal-animation-timing-slow) $easing-function,
      max-block-size var(--calcite-internal-animation-timing-slow) $easing-function;
    transition-delay: 0ms;
  }
}

/**
 * Header
 */
.header {
  @apply border-0
    border-b
    border-solid
    flex
    max-w-full
    min-w-0
    z-header;
  flex: 0 0 auto;
}

.header,
.footer,
.content-top,
.content-bottom {
  border-color: var(--calcite-internal-modal-border-color);
}

.close {
  @apply appearance-none
    border-none
    cursor-pointer
    focus-base
    m-0
    order-2
    transition-default;

  background-color: var(--calcite-modal-close-button-background-color, transparent);
  flex: 0 0 auto;
  padding-block: var(--calcite-internal-modal-padding);
  padding-inline: var(--calcite-internal-modal-padding);

  &:focus {
    @apply focus-inset;
  }
  &:hover,
  &:focus,
  &:active {
    background-color: var(--calcite-modal-close-button-background-color-hover, var(--calcite-color-foreground-2));
    calcite-icon {
      --calcite-icon-color: var(--calcite-modal-close-button-icon-color-hover, var(--calcite-color-text-1));
    }
  }

  calcite-icon {
    @apply pointer-events-none;
    --calcite-icon-color: var(--calcite-modal-close-button-icon-color, var(--calcite-color-text-3));
    vertical-align: -2px;
  }
}

.title {
  @apply order-1 flex min-w-0 items-center;
  flex: 1 1 auto;
  padding-block: var(--calcite-internal-modal-padding);
  padding-inline: var(--calcite-internal-modal-padding-large);
}

@include slotted("header", "*") {
  @apply font-normal m-0;
  color: var(--calcite-color-text-1);
  font-size: var(--calcite-internal-modal-title-text);
}

/**
 * Content area
 */
.content {
  @apply block box-border h-full overflow-auto p-0 relative;
  max-block-size: 100%;
}

.content,
.content-top,
.content-bottom {
  background-color: var(
    --calcite-modal-content-background-color,
    var(--calcite-modal-content-background, var(--calcite-color-foreground-1))
  );
  padding: var(
    --calcite-modal-content-space,
    var(--calcite-modal-content-padding, var(--calcite-internal-modal-padding))
  );
}

.content-top,
.content-bottom {
  @apply border-0 border-solid flex z-header;
  flex: 0 0 auto;
}

.content-top {
  @apply min-w-0 max-w-full border-b;
}

.content-bottom {
  @apply mt-auto box-border w-full justify-between border-t;
}

.header,
.content-top:not(.header ~ .content-top) {
  border-radius: var(--calcite-internal-modal-corner-radius) var(--calcite-internal-modal-corner-radius) 0 0;
}

.footer,
.content-bottom:not(.content-bottom ~ .footer),
.content--no-footer {
  border-radius: 0 0 var(--calcite-internal-modal-corner-radius) var(--calcite-internal-modal-corner-radius);
}

@include slotted("content", "*") {
  font-size: var(--calcite-modal-context-text-internal);
}

/**
 * Footer
 */
.footer {
  @apply border-0
    border-solid
    border-t
    box-border
    flex
    justify-between
    mt-auto
    w-full
    z-header;
  flex: 0 0 auto;
  padding-block: var(--calcite-internal-modal-padding);
  padding-inline: var(--calcite-internal-modal-padding-large);
}

.footer--hide-back .back,
.footer--hide-secondary .secondary {
  @apply hidden;
}

.back {
  @apply block;
  margin-inline-end: auto;
}

.secondary {
  @apply mx-1 block;
}

slot[name="primary"] {
  @apply block;
}

/**
 * Sizes
 */
@mixin modal-size($size, $width) {
  :host([width-scale="#{$size}"]) .modal {
    @apply max-h-full max-w-full;
    inline-size: var(--calcite-modal-width, $width);
    block-size: var(--calcite-modal-height, auto);
  }

  @media screen and (max-width: $width + 2 * $baseline) {
    :host([width-scale="#{$size}"]) {
      .modal {
        @apply m-0 h-full max-h-full w-full max-w-full;
      }
      .content {
        flex: 1 1 auto;
        max-block-size: unset;
      }
    }
    :host([width-scale="#{$size}"][docked]) .container {
      align-items: flex-end;
    }
  }
}

:host([width="small"]) .modal {
  @apply w-auto;
}

@include modal-size("s", 32rem);
@include modal-size("m", 48rem);
@include modal-size("l", 94rem);

/**
 * Fullscreen
 */
:host([fullscreen]) {
  --calcite-internal-modal-corner-radius: var(--calcite-modal-corner-radius, var(--calcite-corner-radius-sharp));
  --calcite-internal-modal-hidden-position: translate3D(0, 20px, 0) scale(0.95);
  --calcite-internal-modal-shown-position: translate3D(0, 0, 0) scale(1);

  .modal {
    @apply h-full m-0 max-h-full max-w-full w-full;
  }
  .content {
    @apply max-h-full;
    flex: 1 1 auto;
  }
}

/**
 * Docked
 */
:host([docked]) {
  .modal {
    block-size: var(--calcite-modal-height, auto);
  }
  .content {
    @apply h-auto;
    flex: 1 1 auto;
  }
}

/**
 * Kinds
 */
:host([kind="brand"]) {
  --calcite-internal-modal-accent-color: var(--calcite-modal-accent-color, var(--calcite-color-brand));
}

:host([kind="danger"]) {
  --calcite-internal-modal-accent-color: var(--calcite-modal-accent-color, var(--calcite-color-status-danger));
}

:host([kind="info"]) {
  --calcite-internal-modal-accent-color: var(--calcite-modal-accent-color, var(--calcite-color-status-info));
}

:host([kind="success"]) {
  --calcite-internal-modal-accent-color: var(--calcite-modal-accent-color, var(--calcite-color-status-success));
}

:host([kind="warning"]) {
  --calcite-internal-modal-accent-color: var(--calcite-modal-accent-color, var(--calcite-color-status-warning));
}

:host([kind="brand"]),
:host([kind="danger"]),
:host([kind="info"]),
:host([kind="success"]),
:host([kind="warning"]) {
  .modal {
    @apply border-0 border-t-4 border-solid;
    border-color: var(--calcite-internal-modal-accent-color);
  }
}

/**
 * Tablet
 */
@media screen and (max-width: $viewport-medium) {
  @include slotted("header", "content-top", "*") {
    color: var(--calcite-color-text-1);
  }
  .footer,
  .content-bottom {
    @apply sticky bottom-0;
  }
}

/**
 * Mobile
 */
@media screen and (max-width: $viewport-small) {
  .footer,
  .content-bottom {
    @apply flex-col;
  }
  .back,
  .secondary {
    @apply m-0 mb-1;
  }
}

/**
 * Conditional styles for when Modal is slotted in Shell
 */

.container.slotted-in-shell {
  position: absolute;
  pointer-events: auto;
  calcite-scrim {
    position: absolute;
  }
}

@include base-component();
