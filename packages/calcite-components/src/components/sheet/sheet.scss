/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-sheet-scrim-background: [Deprecated] use `--calcite-sheet-scrim-background-color` instead. Specifies the background color of the sheet scrim.
 * @prop --calcite-sheet-scrim-background-color: Specifies the background color of the sheet scrim.
 * @prop --calcite-sheet-background-color: Specifies the background color of the sheet.
 * @prop --calcite-sheet-shadow: Specifies the shadow of the sheet.
 * @prop --calcite-sheet-width: When `position` is `"inline-start"` or `"inline-end"`, specifies the width of the component.
 * @prop --calcite-sheet-max-width: When `position` is `"inline-start"` or `"inline-end"`, specifies the maximum width of the component.
 * @prop --calcite-sheet-min-width: When `position` is `"inline-start"` or `"inline-end"`, specifies the minimum width of the component.
 * @prop --calcite-sheet-height:  When `position` is `"block-start"` or `"block-end"`, specifies the height of the component.
 * @prop --calcite-sheet-max-height:  When `position` is `"block-start"` or `"block-end"`, specifies the maximum height of the component.
 * @prop --calcite-sheet-min-height:  When `position` is `"block-start"` or `"block-end"`, specifies the minimum height of the component.
 *
 */

:host {
  @apply flex absolute z-overlay inset-0;
  visibility: hidden !important;
}

.container {
  @apply fixed
    flex
    overflow-y-hidden
    opacity-0
    z-overlay
    invisible;
  box-shadow: var(--calcite-sheet-shadow, var(--calcite-internal-sheet-shadow));
  transition:
    visibility 0ms linear var(--calcite-internal-animation-timing-medium),
    opacity var(--calcite-internal-animation-timing-medium) $easing-function;
}

.content {
  @apply relative box-border block p-0 z-modal overflow-y-hidden;
  max-inline-size: var(--calcite-container-size-content-fluid);
  background-color: var(--calcite-sheet-background-color, theme("colors.background.foreground.1"));
  max-block-size: var(--calcite-container-size-content-fluid);
  visibility: hidden;
  transition:
    transform var(--calcite-internal-animation-timing-medium) $easing-function,
    visibility 0ms linear var(--calcite-internal-animation-timing-medium),
    opacity var(--calcite-internal-animation-timing-medium) $easing-function;
  transform: var(--calcite-sheet-hidden-position-internal);
}

.container--open {
  @apply visible;
  opacity: var(--calcite-opacity-full);
  transition-delay: 0ms;

  .content {
    @apply pointer-events-auto visible;
    opacity: var(--calcite-opacity-full);
    transition:
      transform var(--calcite-internal-animation-timing-medium) $easing-function,
      visibility 0ms linear,
      opacity var(--calcite-internal-animation-timing-medium) $easing-function,
      max-inline-size var(--calcite-internal-animation-timing-medium) $easing-function,
      max-block-size var(--calcite-internal-animation-timing-medium) $easing-function;
    transition-delay: 0ms;
    transform: translate3d(0, 0, 0);
  }
}

.scrim {
  // the sheet should always use a dark scrim, regardless of light / dark mode - matches value in global.scss
  --calcite-scrim-background-color: var(
    --calcite-sheet-scrim-background-color,
    var(--calcite-sheet-scrim-background, #{rgba($blk-240, 0.85)})
  );
  @apply fixed inset-0 flex overflow-y-hidden;
}

:host([position="inline-start"]) .container {
  @apply justify-start;
  inset-block: 0;
  inset-inline: 0 auto;
  --calcite-sheet-hidden-position-internal: translate3d(-1rem, 0, 0);
}

:host([position="inline-end"]) .container {
  @apply justify-end;
  inset-block: 0;
  inset-inline: auto 0;
  --calcite-sheet-hidden-position-internal: translate3d(1rem, 0, 0);
}

:host([position="block-start"]) .container {
  @apply items-start;
  inset-block: 0 auto;
  inset-inline: 0;
  --calcite-sheet-hidden-position-internal: translate3d(0, -1rem, 0);
}

:host([position="block-end"]) .container {
  @apply items-end;
  inset-block: auto 0;
  inset-inline: 0;
  --calcite-sheet-hidden-position-internal: translate3d(0, 1rem, 0);
}

:host([display-mode="float"]) .content {
  --calcite-internal-sheet-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),
    0 2px 12px -4px rgba(0, 0, 0, 0.2), 0 2px 4px -2px rgba(0, 0, 0, 0.16);
}

:host([display-mode="overlay"][position="inline-start"]) .container {
  --calcite-internal-sheet-shadow: 4px 0 8px -1px rgba(0, 0, 0, 0.08), 2px 0 4px -1px rgba(0, 0, 0, 0.04);

  &.calcite--rtl {
    --calcite-internal-sheet-shadow: -4px 0 8px -1px rgba(0, 0, 0, 0.08), -2px 0 4px -1px rgba(0, 0, 0, 0.04);
  }
}

:host([display-mode="overlay"][position="inline-end"]) .container {
  --calcite-internal-sheet-shadow: -4px 0 8px -1px rgba(0, 0, 0, 0.08), -2px 0 4px -1px rgba(0, 0, 0, 0.04);

  &.calcite--rtl {
    --calcite-internal-sheet-shadow: 4px 0 8px -1px rgba(0, 0, 0, 0.08), 2px 0 4px -1px rgba(0, 0, 0, 0.04);
  }
}

:host([display-mode="overlay"][position="block-start"]) .container {
  --calcite-internal-sheet-shadow: 0 4px 8px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -1px rgba(0, 0, 0, 0.04);
}

:host([display-mode="overlay"][position="block-end"]) .container {
  --calcite-internal-sheet-shadow: 0 -4px 8px -1px rgba(0, 0, 0, 0.08), 0 -2px 4px -1px rgba(0, 0, 0, 0.04);
}

:host([position^="inline"]) .container,
:host([position^="inline"]) .content {
  inline-size: var(--calcite-sheet-width, var(--calcite-sheet-width-internal));
  max-inline-size: var(--calcite-sheet-max-width-internal);
  min-inline-size: var(--calcite-sheet-min-width-internal);
}

:host([position^="block"]) .container,
:host([position^="block"]) .content {
  block-size: var(--calcite-sheet-height-internal);
  max-block-size: var(--calcite-sheet-max-height-internal);
  min-block-size: var(--calcite-sheet-min-height-internal);
}

:host([display-mode="float"][position^="inline"]) .container {
  block-size: calc(100% - 1.5rem);
  max-block-size: calc(100% - 1.5rem);
  min-block-size: calc(100% - 1.5rem);
}
:host([display-mode="float"][position^="block"]) .container {
  inline-size: calc(100% - 1.5rem);
  max-inline-size: calc(100% - 1.5rem);
  min-inline-size: calc(100% - 1.5rem);
}

:host([position^="inline"][width-scale="s"]) {
  --calcite-sheet-width-internal: 15vw;
  --calcite-sheet-max-width-internal: 360px;
  --calcite-sheet-min-width-internal: 260px;
}

:host([position^="inline"][width-scale="m"]) {
  --calcite-sheet-width-internal: 25vw;
  --calcite-sheet-max-width-internal: 420px;
  --calcite-sheet-min-width-internal: 300px;
}

:host([position^="inline"][width-scale="l"]) {
  --calcite-sheet-width-internal: 45vw;
  --calcite-sheet-max-width-internal: 680px;
  --calcite-sheet-min-width-internal: 340px;
}

:host([position^="block"][height-scale="s"]) {
  --calcite-sheet-min-height-internal: 160px;
  --calcite-sheet-height-internal: 30vh;
  --calcite-sheet-max-height-internal: 30vh;
}

:host([position^="block"][height-scale="m"]) {
  --calcite-sheet-min-height-internal: 200px;
  --calcite-sheet-height-internal: 45vh;
  --calcite-sheet-max-height-internal: 50vh;
}

:host([position^="block"][height-scale="l"]) {
  --calcite-sheet-min-height-internal: 240px;
  --calcite-sheet-height-internal: 60vh;
  --calcite-sheet-max-height-internal: 70vh;
}

:host([opened]) {
  visibility: visible !important;
}

:host([display-mode="float"]) .content,
:host([display-mode="float"]) .container {
  border-radius: var(--calcite-corner-radius-round);
}

:host([display-mode="float"]) .container {
  @apply p-3;
}

:host([position="inline-start"]) .content,
:host([position="inline-end"]) .content {
  block-size: var(--calcite-container-size-content-fluid);
}

:host([position="block-start"]) .content,
:host([position="block-end"]) .content {
  inline-size: var(--calcite-container-size-content-fluid);
}

/**
 * Conditional styles for when Sheet is slotted in Shell
 */
:host([position]) .container--slotted-in-shell {
  @apply absolute pointer-events-auto;
  inline-size: var(--calcite-container-size-content-fluid);
  max-inline-size: var(--calcite-container-size-content-fluid);
  min-inline-size: var(--calcite-container-size-content-fluid);
  block-size: var(--calcite-container-size-content-fluid);
  max-block-size: var(--calcite-container-size-content-fluid);
  min-block-size: var(--calcite-container-size-content-fluid);
  calcite-scrim {
    @apply absolute;
  }
}

@include base-component();
