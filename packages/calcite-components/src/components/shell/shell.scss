/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-shell-background-color: The background color of the component.
 * @prop --calcite-shell-border-color: The border color of the component.
 * @prop --calcite-shell-tip-spacing: [Deprecated] Set spacing on the `calcite-tip-manager` instead. The left and right spacing of the `calcite-tip-manager` when slotted in the component.
 */

:host {
  --calcite-shell-background-color: var(--calcite-color-foreground-1);
  --calcite-shell-border-color: var(--calcite-color-border-3);
  --calcite-shell-tip-spacing: 26vw;

  @include base-host();
  background-color: var(--calcite-shell-background-color);
  font-size: var(--calcite-font-size--1);
  position: absolute;
  inset: 0;
  display: flex;
  block-size: var(--calcite-container-size-content-fluid);
  inline-size: var(--calcite-container-size-content-fluid);
  flex-direction: column;
  overflow: hidden;
}

.main {
  position: relative;
  display: flex;
  block-size: var(--calcite-container-size-content-fluid);
  inline-size: var(--calcite-container-size-content-fluid);
  flex: 1 1 auto;
  flex-direction: row;
  justify-content: space-between;
  overflow: hidden;
}

.content,
.content--non-interactive {
  display: flex;
  block-size: var(--calcite-container-size-content-fluid);
  inline-size: var(--calcite-container-size-content-fluid);
  flex-direction: column;
  flex-wrap: nowrap;
}

.content {
  overflow: auto;
}

.content ::slotted(calcite-shell-center-row),
.content ::slotted(calcite-panel),
.content ::slotted(calcite-flow) {
  flex: 1 1 auto;
  align-self: stretch;
  max-block-size: unset;
}

.content--behind {
  position: absolute;
  inset: 0px;
  border-width: 0px;
  z-index: calc(var(--calcite-z-index) - 1);
  display: initial;
}

.content--non-interactive {
  pointer-events: none;
}

::slotted(calcite-shell-center-row) {
  inline-size: unset;
  flex: none;
  align-self: stretch;
}

::slotted(.header .heading) {
  font-size: var(--calcite-font-size--2);
  line-height: 1.375;
  font-weight: var(--calcite-font-weight-normal);
}

slot[name="panel-end"]::slotted(calcite-shell-panel) {
  margin-inline-start: auto;
}

::slotted(calcite-panel),
::slotted(calcite-flow) {
  border-color: var(--calcite-shell-border-color);
  border-width: var(--calcite-border-width-sm);
  border-inline-start-width: 0px;
  border-inline-end-width: 0px;
  border-style: solid;
}

slot[name="center-row"]::slotted(calcite-shell-center-row:not([detached])),
slot[name="panel-top"]::slotted(calcite-shell-center-row:not([detached])),
slot[name="panel-bottom"]::slotted(calcite-shell-center-row:not([detached])) {
  border-color: var(--calcite-shell-border-color);
  border-inline-start-width: var(--calcite-border-width-sm);
  border-inline-end-width: var(--calcite-border-width-sm);
}

.center-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  block-size: var(--calcite-container-size-content-fluid);
  inline-size: var(--calcite-container-size-content-fluid);
  min-inline-size: 0;
}

::slotted(calcite-tip-manager) {
  position: absolute;
  box-sizing: border-box;
  animation: in-up var(--calcite-internal-animation-timing-slow) ease-in-out;
  border-radius: var(--calcite-corner-radius-round);
  z-index: var(--calcite-z-index-toast);
  box-shadow: var(--calcite-shadow-md);
  inset-block-end: var(--calcite-spacing-sm);
  inset-inline: var(--calcite-shell-tip-spacing);
}

slot[name="center-row"]::slotted(calcite-shell-center-row),
slot[name="panel-bottom"]::slotted(calcite-shell-center-row) {
  margin-block-start: auto;
}

slot[name="panel-top"]::slotted(calcite-shell-center-row) {
  margin-block-end: auto;
}

// positioning logic for expected slotted components
.position-wrapper {
  position: absolute;
  pointer-events: none;
  inset: 0;
}

@include base-component();
