/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-switch-background-color: Specifies the component's background color.
 * @prop --calcite-switch-background-color-hover: Specifies the component's background color.
 * @prop --calcite-switch-border-color: Specifies the component's border color.
 * @prop --calcite-switch-corner-radius: Specifies the component's corner radius.
 * @prop --calcite-switch-handle-background-color: Specifies the handle's background color.
 * @prop --calcite-switch-handle-background-color-hover: Specifies the handle's background color.
 * @prop --calcite-switch-handle-border-color: Specifies the handle's border color.
 * @prop --calcite-switch-handle-corner-radius: Specifies the handle's corner radius.
 * @prop --calcite-switch-handle-shadow: Specifies the handle's shadow.
 */

// todo: question: do we need size variables for the scales?
// todo: question: do we want to call the vars `handle`? I've also seen `thumb` used here.

// sizes
:host([scale="s"]) {
  .container {
    @apply h-3;
  }
  .track {
    @apply h-3 w-6;
  }
  .handle {
    @apply h-2 w-2;
  }
}

:host([scale="m"]) {
  .container {
    @apply h-4;
  }
  .track {
    @apply h-4 w-8;
  }
  .handle {
    @apply h-3 w-3;
  }
}

:host([scale="l"]) {
  .container {
    @apply h-6;
  }
  .track {
    @apply h-6 w-12;
  }
  .handle {
    @apply h-5 w-5;
  }
}

:host {
  @apply relative
    inline-block
    w-auto
    cursor-pointer
    select-none
    align-middle;
  tap-highlight-color: transparent;
}

@include disabled();

.container {
  @apply outline-0;
}

.track {
  // --calcite-switch-background-color
  // --calcite-switch-border-color
  // --calcite-switch-corner-radius
  @apply bg-foreground-2
    border-color-2
    pointer-events-none
    relative
    box-border
    inline-block
    rounded-full
    border
    border-solid
    align-top
    focus-base;
}

.container:focus .track {
  @apply focus-outset;
}

.handle {
  // --calcite-switch-handle-background-color
  // --calcite-switch-handle-border-color
  // --calcite-switch-handle-corner-radius
  // --calcite-switch-handle-shadow
  @apply bg-foreground-1
    border-color-input
    pointer-events-none
    absolute
    block
    rounded-full
    border-2
    border-solid
    transition-all
    duration-150
    ease-in-out;
  inset-block-start: -1px;
  inset-inline: -1px theme("inset.auto");
}

.container:hover,
.container:focus {
  .track {
    // --calcite-switch-background-color-hover
  }
  .handle {
    // --calcite-switch-handle-background-color-hover
    @apply border-color-brand;
    // --calcite-switch-handle-shadow
    box-shadow: inset 0 0 0 1px var(--calcite-color-brand);
  }
}

:host([checked]) {
  .track {
    // --calcite-switch-background-color-hover
    @apply bg-brand border-color-brand-hover;
  }
  .handle {
    @apply border-color-brand;
    // --calcite-switch-handle-shadow
    inset-inline: theme("inset.auto") -1px;
  }

  .container:hover {
    .handle {
      // --calcite-switch-handle-border-color
      @apply border-color-brand-hover;
      // --calcite-switch-handle-shadow
      box-shadow: inset 0 0 0 1px var(--calcite-color-brand-hover);
    }
  }
}

@media (forced-colors: active) {
  :host([checked]) {
    .track {
      background-color: canvasText;
    }
  }
}

@include hidden-form-input();
@include base-component();
