{"version":3,"file":"main.aa83bb88.iframe.bundle.js","mappings":";AAgGA;AAGA;;AAMA;;;;;;;AAOA;;;;AAIA;;;;AAIA;AAEA","sources":["webpack://@esri/calcite-components/./.storybook/utils.ts"],"sourcesContent":["import { CSS_UTILITY } from \"../src/utils/resources\";\nimport { withThemeByClassName } from \"@storybook/addon-themes\";\nimport { Scale } from \"../src/components/interfaces\";\nimport { html } from \"../support/formatting\";\nimport { Breakpoints } from \"../src/utils/responsive\";\n\nexport const themeDecorator = withThemeByClassName({\n  themes: {\n    auto: CSS_UTILITY.autoMode,\n    light: CSS_UTILITY.lightMode,\n    dark: CSS_UTILITY.darkMode,\n  },\n  defaultTheme: \"light\",\n});\n\nexport const modesDarkDefault = {\n  themeOverride: \"dark\",\n};\n\nexport interface KnobbedAttribute {\n  name: string;\n  value: ReturnType<any>;\n}\n\nexport interface SimpleAttribute {\n  name: string;\n  value: string | boolean | number;\n}\n\nexport type Attribute = KnobbedAttribute | SimpleAttribute;\nexport type Attributes = Attribute[];\n\ninterface DeferredAttribute {\n  name: string;\n  commit: () => Attribute;\n}\n\nexport const createComponentHTML = (tagName: string, attributes: Attributes, contentHTML: string = \"\"): string =>\n  `<${tagName} ${attributes\n    .map(({ name, value }) => {\n      const booleanAttr = typeof value === \"boolean\";\n      if (booleanAttr) {\n        return value ? name : \"\";\n      }\n      return `${name}=\"${value}\"`;\n    })\n    .join(\" \")}>${contentHTML}</${tagName}>`;\n\nexport const filterComponentAttributes = (attributesList: DeferredAttribute[], exceptions: string[]): Attributes => {\n  if (!exceptions.length) {\n    return attributesList.map((attr) => attr.commit());\n  }\n  return attributesList\n    .filter((attr) => !exceptions.find((except) => except === attr.name))\n    .map((attr) => attr.commit());\n};\n\n/**\n * This helper creates a story that captures all breakpoints across all scales for testing.\n *\n * @param singleStoryHtml – HTML story template with placeholders for `scale` attributes (e.g., `{scale}`). You can additionally use `.breakpoint-stories-container` and `.breakpoint-story-container` to style breakpoint story containers.\n * @param [focused] – when specified, creates a single story for the provided breakpoint and scale.\n *   This should only be used if multiple stories cannot be displayed side-by-side.\n */\nexport function createBreakpointStories(\n  singleStoryHtml: string,\n  focused?: { breakpoint: keyof Breakpoints[\"width\"]; scale: Scale },\n): string {\n  // we hard-code breakpoint values because we can't read them directly from the page when setting up a story\n  // based on https://github.com/Esri/calcite-design-tokens/blob/2e8fc1b8f410b5443fa53ca1c12ceef71e651b9a/tokens/core.json#L1533-L1553\n  const widthBreakpoints: { name: keyof Breakpoints[\"width\"]; maxWidth: number }[] = [\n    { name: \"xxsmall\", maxWidth: 320 },\n    { name: \"xsmall\", maxWidth: 476 },\n    { name: \"small\", maxWidth: 768 },\n    { name: \"medium\", maxWidth: 1152 },\n    { name: \"large\", maxWidth: 1440 },\n  ];\n  const scales: Scale[] = [\"s\", \"m\", \"l\"];\n  const placeholderPattern = /\"\\{([^}]+)\\}\"/g;\n  const css = {\n    storiesContainer: \"breakpoint-stories-container\",\n    storyContainer: \"breakpoint-story-container\",\n  } as const;\n\n  let storyHTML = \"\";\n\n  scales\n    .filter((scale): boolean => !focused || focused.scale === scale)\n    .forEach((scale): void => {\n      storyHTML += html`<strong>scale = ${scale}</strong>`;\n\n      widthBreakpoints\n        .filter(({ name }): boolean => !focused || focused.breakpoint === name)\n        .forEach(({ name, maxWidth }): void => {\n          storyHTML += html`<strong>breakpoint = ${name}</strong>`;\n          storyHTML += html`<div class=\"${css.storyContainer}\" style=\"width:${maxWidth - 1}px\">\n            ${singleStoryHtml.replace(placeholderPattern, (_match, placeholder: string) =>\n              placeholder === \"scale\" ? scale : placeholder,\n            )}\n          </div>`;\n        });\n    });\n\n  return html`<div class=\"${css.storiesContainer}\">\n    <style>\n      .${css.storiesContainer} {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        justify-content: flex-start;\n      }\n\n      .${css.storyContainer} {\n        display: flex;\n      }\n\n      .${css.storyContainer} > * {\n        flex: 1;\n      }\n    </style>\n    ${storyHTML}\n  </div>`;\n}\n"],"names":[],"sourceRoot":""}