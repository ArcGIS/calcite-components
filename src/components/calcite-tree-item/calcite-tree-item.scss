:host {
  @apply block
    cursor-pointer
    outline-none
    max-w-full;
  --calcite-tree-text: theme("textColor.color.3");
  --calcite-tree-text-hover: theme("textColor.color.1");
  --calcite-tree-text-active: theme("textColor.color.1");
  color: var(--calcite-tree-text);
  --calcite-tree-chevron: var(--calcite-ui-border-1);
  --calcite-tree-vertical-padding: 0;
  --calcite-tree-indicator: var(--calcite-ui-border-1);
  --calcite-tree-indicator-active: var(--calcite-ui-brand);
  --calcite-tree-indicator-first-start: 0.1rem;
  --calcite-tree-indicator-first-end: auto;
  --calcite-tree-indicator-distance-start: 0.15rem;
  --calcite-tree-indicator-distance-end: auto;
  --calcite-tree-icon-edge-distance-start: -0.2rem;
  --calcite-tree-icon-edge-distance-end: 0;
  --calcite-tree-icon-content-distance-start: #{$baseline/4};
  --calcite-tree-icon-content-distance-end: 0;
  --calcite-tree-indent-start: 1.4rem;
  --calcite-tree-indent-end: 0;
  --calcite-tree-children-indent-start: 0.25rem;
  --calcite-tree-children-indent-end: 0;
  --calcite-tree-children-padding-start: 1rem;
  --calcite-tree-children-padding-end: 0;
  --calcite-tree-checkbox-padding-start: 0;
  --calcite-tree-checkbox-padding-end: 0.5rem;
}

:host([scale="s"]) {
  --calcite-tree-vertical-padding: theme("padding.1");
}

:host([scale="m"]) {
  --calcite-tree-vertical-padding: theme("padding.2");
}

:host([scale="l"]) {
  --calcite-tree-vertical-padding: theme("padding.3");
}

:host([lines]) {
  --calcite-tree-line: theme("borderColor.color.2");
  margin-inline-start: 2px;
  margin-inline-end: 8px;

  .calcite-tree-children {
    left: 4px;

    &.calcite--rtl {
      left: unset;
      right: 4px;
    }
  }

  &:host([scale="s"]) .calcite-tree-children {
    left: 2px;

    &.calcite--rtl {
      left: unset;
      right: 2px;
    }
  }

  &:host([scale="l"]) .calcite-tree-children {
    left: 8px;

    &.calcite--rtl {
      left: unset;
      right: 8px;
    }
  }
}

:host(:not([lines])) .calcite-tree-node:after {
  @apply hidden;
}

:host .calcite--rtl {
  --calcite-tree-indicator-first-start: 0;
  --calcite-tree-indicator-first-end: 0.1rem;
  --calcite-tree-indicator-distance-start: auto;
  --calcite-tree-indicator-distance-end: 0.15rem;
  --calcite-tree-icon-edge-distance-start: auto;
  --calcite-tree-icon-edge-distance-end: -0.2rem;
  --calcite-tree-icon-content-distance-start: 0;
  --calcite-tree-icon-content-distance-end: #{$baseline/4};
  --calcite-tree-indent-start: 0;
  --calcite-tree-indent-end: 1.4rem;
  --calcite-tree-children-indent-start: 0;
  --calcite-tree-children-indent-end: 0.25rem;
  --calcite-tree-children-padding-start: 0;
  --calcite-tree-children-padding-end: 1rem;
  --calcite-tree-checkbox-padding-start: 0.5rem;
  --calcite-tree-checkbox-padding-end: 0;
  --calcite-tree-line-position-start: 0;
  --calcite-tree-line-position-end: 0.05rem;
  --calcite-tree-parent-line-position-start: 0;
  --calcite-tree-parent-line-position-end: -0.95rem;
}

:host(:not([has-children])) {
  .calcite-tree-chevron {
    @apply opacity-0;
  }
}

::slotted(*) {
  @apply break-words min-w-0 max-w-full;
  color: inherit;
  text-decoration: none !important;

  &:hover {
    text-decoration: none !important;
  }
}

::slotted(a) {
  @apply w-full no-underline;
}
// focus styles
:host {
  @apply focus-base;
}
:host(:focus) {
  @apply focus-inset;
}

.calcite-tree-checkbox {
  @apply outline-none;
  line-height: 0;
  padding-inline-start: var(--calcite-tree-vertical-padding);
  padding-inline-end: var(--calcite-tree-vertical-padding);
}

.calcite-tree-label {
  @apply flex items-center pointer-events-none;
}

.calcite-tree-children {
  z-index: 1;
  margin-left: var(--calcite-tree-children-indent-start);
  margin-right: var(--calcite-tree-children-indent-end);
  padding-left: var(--calcite-tree-children-padding-start);
  padding-right: var(--calcite-tree-children-padding-end);
  position: relative;
  transform: scaleY(0);
  opacity: 0;
  overflow: hidden;
  transition: 0.15s $easing-function, opacity 0.15s $easing-function, all 0.15s ease-in-out; // note that we're transitioning transform, not height!
  height: 0;
  transform-origin: top; // keep the top of the element in the same place. this is optional.

  // show vertical lines
  &:after {
    @apply transition-default
      transition-colors
      top-0
      absolute
      w-px;
    // ensure lines don't overlap focus outline
    height: 92%;
    content: "";
    background-color: var(--calcite-tree-line);
  }
  :host([expanded]) > & {
    transform: scaleY(1);
    opacity: 1;
    height: auto;
  }
}

:host([scale="s"]) .calcite-tree-node {
  --calcite-tree-vertical-padding: theme("padding.1");
}
:host([scale="m"]) .calcite-tree-node {
  --calcite-tree-vertical-padding: theme("padding.2");
}
:host([scale="l"]) .calcite-tree-node {
  --calcite-tree-vertical-padding: theme("padding.3");
}

.calcite-tree-node {
  @apply flex items-center relative;
  padding: var(--calcite-tree-vertical-padding) 0;

  .calcite-tree-checkbox,
  .calcite-tree-checkmark,
  .calcite-tree-bullet-point {
    margin-inline-start: var(--calcite-tree-vertical-padding);
    margin-inline-end: var(--calcite-tree-vertical-padding);
  }

  .calcite-tree-checkmark,
  .calcite-tree-bullet-point {
    @apply transition-default opacity-0;
    color: var(--calcite-tree-indicator);
  }

  &:after {
    :host([depth="1"]) > & {
      @apply hidden;
    }
  }
}

:host([has-children]) > .calcite-tree-node {
  @apply pl-0 pr-0;
  .calcite-tree-bullet-point {
    @apply hidden;
  }
}

.calcite-tree-node:hover,
:host([selected]) .calcite-tree-node:hover,
:host(:focus) .calcite-tree-node {
  &:after {
    z-index: 2;
  }
  ::slotted(*) {
    color: var(--calcite-tree-text-hover);
  }

  .calcite-tree-checkmark {
    @apply opacity-100;
  }

  .calcite-tree-bullet-point {
    @apply opacity-100;
  }
}

:host([selected]) > .calcite-tree-node,
:host([selected]) > .calcite-tree-node:hover {
  @apply font-medium text-color-3;

  .calcite-tree-bullet-point {
    @apply opacity-100;
    color: theme("colors.brand");
  }
  &:after {
    z-index: 2;
  }
  ::slotted(*) {
    color: var(--calcite-tree-text-active);
  }
}

// dropdown expanded and not selected
:host([has-children][expanded]) > .calcite-tree-node {
  @apply font-medium;
  ::slotted(*) {
    color: var(--calcite-tree-text-active);
  }
}

// dropdown with children
:host([has-children]) > .calcite-tree-node {
  .calcite-tree-bullet-point,
  .calcite-tree-checkmark {
    @apply hidden;
  }
}

.calcite-tree-chevron {
  @apply transition-default relative self-center;
  flex: 0 0 auto;
  margin-inline-start: var(--calcite-tree-vertical-padding);
  margin-inline-end: var(--calcite-tree-vertical-padding);
  transform: rotate(0deg);

  .calcite--rtl & {
    transform: rotate(180deg);
  }

  :host([expanded]) > .calcite-tree-node > & {
    transform: rotate(90deg);
  }
}

:host([selected]) [data-selection-mode] {
  .calcite-tree-checkmark,
  .calcite-tree-bullet-point {
    @apply opacity-100 font-medium;
    color: theme("colors.brand");
  }
  .calcite-tree-chevron {
    stroke: theme("colors.brand");
    stroke-width: 0.75;
    fill: theme("colors.brand");
  }
}
